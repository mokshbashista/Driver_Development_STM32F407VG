
stm32f4xx2_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002cb8  08002cb8  00003cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db0  08002db0  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  08002db0  08002db0  00003db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002db8  08002db8  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00003db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002dc0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          00000258  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000358f  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000057  00000000  00000000  0000763b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00002418  00000000  00000000  00007692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000a61  00000000  00000000  00009aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000002e0  00000000  00000000  0000a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ac1d  00000000  00000000  0000a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000219  00000000  00000000  0001540d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00002f8c  00000000  00000000  00015626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000185b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001634  00000000  00000000  000185f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ca0 	.word	0x08002ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08002ca0 	.word	0x08002ca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	@ (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	@ (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	@ (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f001 fd07 	bl	8001cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f001 f9d7 	bl	8001664 <main>

080002b6 <LoopForever>:

LoopForever:
  b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80002c4:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 80002c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80002cc:	200002d4 	.word	0x200002d4

080002d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_IRQHandler>
	...

080002d4 <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 80002da:	f000 f90f 	bl	80004fc <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80002de:	f000 f949 	bl	8000574 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	4809      	ldr	r0, [pc, #36]	@ (800030c <ds1307_init+0x38>)
 80002e6:	f000 fe41 	bl	8000f6c <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80002ea:	2100      	movs	r1, #0
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f957 	bl	80005a0 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f970 	bl	80005d8 <ds1307_read>
 80002f8:	4603      	mov	r3, r0
 80002fa:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	09db      	lsrs	r3, r3, #7
 8000300:	b2db      	uxtb	r3, r3

}
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40005400 	.word	0x40005400

08000310 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f979 	bl	8000614 <binary_to_bcd>
 8000322:	4603      	mov	r3, r0
 8000324:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000326:	7bbb      	ldrb	r3, [r7, #14]
 8000328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800032c:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f934 	bl	80005a0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	785b      	ldrb	r3, [r3, #1]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f969 	bl	8000614 <binary_to_bcd>
 8000342:	4603      	mov	r3, r0
 8000344:	2101      	movs	r1, #1
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f92a 	bl	80005a0 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f95f 	bl	8000614 <binary_to_bcd>
 8000356:	4603      	mov	r3, r0
 8000358:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	78db      	ldrb	r3, [r3, #3]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000368:	73fb      	strb	r3, [r7, #15]
 800036a:	e011      	b.n	8000390 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000372:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	78db      	ldrb	r3, [r3, #3]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d104      	bne.n	8000386 <ds1307_set_current_time+0x76>
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	b2db      	uxtb	r3, r3
 8000384:	e003      	b.n	800038e <ds1307_set_current_time+0x7e>
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	f023 0320 	bic.w	r3, r3, #32
 800038c:	b2db      	uxtb	r3, r3
 800038e:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	2102      	movs	r1, #2
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f903 	bl	80005a0 <ds1307_write>

}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f930 	bl	8000614 <binary_to_bcd>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2104      	movs	r1, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f8f1 	bl	80005a0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f926 	bl	8000614 <binary_to_bcd>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2105      	movs	r1, #5
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f8e7 	bl	80005a0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	789b      	ldrb	r3, [r3, #2]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f91c 	bl	8000614 <binary_to_bcd>
 80003dc:	4603      	mov	r3, r0
 80003de:	2106      	movs	r1, #6
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f8dd 	bl	80005a0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	78db      	ldrb	r3, [r3, #3]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f912 	bl	8000614 <binary_to_bcd>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2103      	movs	r1, #3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f8d3 	bl	80005a0 <ds1307_write>

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b084      	sub	sp, #16
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 f8e4 	bl	80005d8 <ds1307_read>
 8000410:	4603      	mov	r3, r0
 8000412:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800041a:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 800041c:	7bbb      	ldrb	r3, [r7, #14]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f924 	bl	800066c <bcd_to_binary>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f8d3 	bl	80005d8 <ds1307_read>
 8000432:	4603      	mov	r3, r0
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f919 	bl	800066c <bcd_to_binary>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000442:	2002      	movs	r0, #2
 8000444:	f000 f8c8 	bl	80005d8 <ds1307_read>
 8000448:	4603      	mov	r3, r0
 800044a:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00f      	beq.n	8000476 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	2b00      	cmp	r3, #0
 800045e:	bf14      	ite	ne
 8000460:	2301      	movne	r3, #1
 8000462:	2300      	moveq	r3, #0
 8000464:	b2db      	uxtb	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e002      	b.n	800047c <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2202      	movs	r2, #2
 800047a:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f8f4 	bl	800066c <bcd_to_binary>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	709a      	strb	r2, [r3, #2]
}
 800048c:	bf00      	nop
 800048e:	3710      	adds	r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800049c:	2003      	movs	r0, #3
 800049e:	f000 f89b 	bl	80005d8 <ds1307_read>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f8e1 	bl	800066c <bcd_to_binary>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80004b2:	2004      	movs	r0, #4
 80004b4:	f000 f890 	bl	80005d8 <ds1307_read>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f8d6 	bl	800066c <bcd_to_binary>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80004c8:	2005      	movs	r0, #5
 80004ca:	f000 f885 	bl	80005d8 <ds1307_read>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f8cb 	bl	800066c <bcd_to_binary>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80004de:	2006      	movs	r0, #6
 80004e0:	f000 f87a 	bl	80005d8 <ds1307_read>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f8c0 	bl	800066c <bcd_to_binary>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	709a      	strb	r2, [r3, #2]

}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	220c      	movs	r2, #12
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fb8a 	bl	8001c24 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000510:	463b      	mov	r3, r7
 8000512:	220c      	movs	r2, #12
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fb84 	bl	8001c24 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 800051c:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <ds1307_i2c_pin_config+0x74>)
 800051e:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000520:	2304      	movs	r3, #4
 8000522:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000524:	2302      	movs	r3, #2
 8000526:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000528:	2307      	movs	r3, #7
 800052a:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800052c:	2301      	movs	r3, #1
 800052e:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000530:	2301      	movs	r3, #1
 8000532:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000534:	2302      	movs	r3, #2
 8000536:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fad1 	bl	8000ae4 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <ds1307_i2c_pin_config+0x74>)
 8000544:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000546:	2304      	movs	r3, #4
 8000548:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800054a:	2302      	movs	r3, #2
 800054c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800054e:	2306      	movs	r3, #6
 8000550:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000552:	2301      	movs	r3, #1
 8000554:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800055a:	2302      	movs	r3, #2
 800055c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800055e:	463b      	mov	r3, r7
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fabf 	bl	8000ae4 <GPIO_Init>

}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020400 	.word	0x40020400

08000574 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <ds1307_i2c_config+0x20>)
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <ds1307_i2c_config+0x24>)
 800057c:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <ds1307_i2c_config+0x20>)
 8000580:	2201      	movs	r2, #1
 8000582:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <ds1307_i2c_config+0x20>)
 8000586:	4a05      	ldr	r2, [pc, #20]	@ (800059c <ds1307_i2c_config+0x28>)
 8000588:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 800058a:	4802      	ldr	r0, [pc, #8]	@ (8000594 <ds1307_i2c_config+0x20>)
 800058c:	f000 fd42 	bl	8001014 <I2C_Init>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000098 	.word	0x20000098
 8000598:	40005400 	.word	0x40005400
 800059c:	000186a0 	.word	0x000186a0

080005a0 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80005b8:	f107 010c 	add.w	r1, r7, #12
 80005bc:	2300      	movs	r3, #0
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2368      	movs	r3, #104	@ 0x68
 80005c2:	2202      	movs	r2, #2
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <ds1307_write+0x34>)
 80005c6:	f000 fde9 	bl	800119c <I2C_MasterSendData>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000098 	.word	0x20000098

080005d8 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	2300      	movs	r3, #0
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2368      	movs	r3, #104	@ 0x68
 80005ea:	2201      	movs	r2, #1
 80005ec:	4808      	ldr	r0, [pc, #32]	@ (8000610 <ds1307_read+0x38>)
 80005ee:	f000 fdd5 	bl	800119c <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2300      	movs	r3, #0
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2368      	movs	r3, #104	@ 0x68
 80005fc:	2201      	movs	r2, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	@ (8000610 <ds1307_read+0x38>)
 8000600:	f000 fe2f 	bl	8001262 <I2C_MasterReceiveData>

    return data;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000098 	.word	0x20000098

08000614 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b09      	cmp	r3, #9
 8000626:	d918      	bls.n	800065a <binary_to_bcd+0x46>
	{
		m = value /10;
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <binary_to_bcd+0x54>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <binary_to_bcd+0x54>)
 8000638:	fba3 1302 	umull	r1, r3, r3, r2
 800063c:	08d9      	lsrs	r1, r3, #3
 800063e:	460b      	mov	r3, r1
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	b25a      	sxtb	r2, r3
 8000650:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000654:	4313      	orrs	r3, r2
 8000656:	b25b      	sxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	cccccccd 	.word	0xcccccccd

0800066c <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 800068e:	7bfa      	ldrb	r2, [r7, #15]
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	4413      	add	r3, r2
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <lcd_send_command>:
static void lcd_enable(void);
void lcd_display_clear(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]


	//RS = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS,GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2109      	movs	r1, #9
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <lcd_send_command+0x40>)
 80006b4:	f000 fbb2 	bl	8000e1c <GPIO_WriteToOutputPin>


	//RnW = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW,GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	210a      	movs	r1, #10
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <lcd_send_command+0x40>)
 80006be:	f000 fbad 	bl	8000e1c <GPIO_WriteToOutputPin>

	write_to_4_bits(cmd >> 4);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f8cd 	bl	8000868 <write_to_4_bits>

	write_to_4_bits(cmd & 0x0F);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f8c6 	bl	8000868 <write_to_4_bits>




}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <lcd_send_data>:


void lcd_send_data(uint8_t data){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]


	//RS = 1
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS,GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2109      	movs	r1, #9
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <lcd_send_data+0x40>)
 80006f8:	f000 fb90 	bl	8000e1c <GPIO_WriteToOutputPin>


	//RnW = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW,GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	210a      	movs	r1, #10
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <lcd_send_data+0x40>)
 8000702:	f000 fb8b 	bl	8000e1c <GPIO_WriteToOutputPin>

	write_to_4_bits(data >> 4);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f8ab 	bl	8000868 <write_to_4_bits>

	write_to_4_bits(data & 0x0F);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f8a4 	bl	8000868 <write_to_4_bits>


}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020c00 	.word	0x40020c00

0800072c <lcd_print_string>:

void lcd_print_string(char *message)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_send_data((uint8_t)*message++);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffd3 	bl	80006e8 <lcd_send_data>
      }
      while (*message != '\0');
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f4      	bne.n	8000734 <lcd_print_string+0x8>

}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lcd_init>:

void lcd_init(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 800075a:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <lcd_init+0x110>)
 800075c:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800075e:	2301      	movs	r3, #1
 8000760:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000762:	2309      	movs	r3, #9
 8000764:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000766:	2300      	movs	r3, #0
 8000768:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800076a:	2300      	movs	r3, #0
 800076c:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800076e:	2302      	movs	r3, #2
 8000770:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&lcd_signal);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f9b5 	bl	8000ae4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800077a:	230a      	movs	r3, #10
 800077c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f9af 	bl	8000ae4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000786:	230b      	movs	r3, #11
 8000788:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f9a9 	bl	8000ae4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000792:	230c      	movs	r3, #12
 8000794:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f9a3 	bl	8000ae4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 800079e:	230d      	movs	r3, #13
 80007a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f99d 	bl	8000ae4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 80007aa:	230e      	movs	r3, #14
 80007ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f997 	bl	8000ae4 <GPIO_Init>


	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80007b6:	230f      	movs	r3, #15
 80007b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f991 	bl	8000ae4 <GPIO_Init>


	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS,GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2109      	movs	r1, #9
 80007c6:	4827      	ldr	r0, [pc, #156]	@ (8000864 <lcd_init+0x110>)
 80007c8:	f000 fb28 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW,GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	210a      	movs	r1, #10
 80007d0:	4824      	ldr	r0, [pc, #144]	@ (8000864 <lcd_init+0x110>)
 80007d2:	f000 fb23 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN,GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	210b      	movs	r1, #11
 80007da:	4822      	ldr	r0, [pc, #136]	@ (8000864 <lcd_init+0x110>)
 80007dc:	f000 fb1e 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	210c      	movs	r1, #12
 80007e4:	481f      	ldr	r0, [pc, #124]	@ (8000864 <lcd_init+0x110>)
 80007e6:	f000 fb19 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5,GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210d      	movs	r1, #13
 80007ee:	481d      	ldr	r0, [pc, #116]	@ (8000864 <lcd_init+0x110>)
 80007f0:	f000 fb14 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	210e      	movs	r1, #14
 80007f8:	481a      	ldr	r0, [pc, #104]	@ (8000864 <lcd_init+0x110>)
 80007fa:	f000 fb0f 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7,GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	4818      	ldr	r0, [pc, #96]	@ (8000864 <lcd_init+0x110>)
 8000804:	f000 fb0a 	bl	8000e1c <GPIO_WriteToOutputPin>

	mdelay(40);
 8000808:	2028      	movs	r0, #40	@ 0x28
 800080a:	f000 f8b6 	bl	800097a <mdelay>



	//RS = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2109      	movs	r1, #9
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <lcd_init+0x110>)
 8000814:	f000 fb02 	bl	8000e1c <GPIO_WriteToOutputPin>


	//RnW = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW,GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	210a      	movs	r1, #10
 800081c:	4811      	ldr	r0, [pc, #68]	@ (8000864 <lcd_init+0x110>)
 800081e:	f000 fafd 	bl	8000e1c <GPIO_WriteToOutputPin>

	write_to_4_bits(0x3);
 8000822:	2003      	movs	r0, #3
 8000824:	f000 f820 	bl	8000868 <write_to_4_bits>

	mdelay(5);
 8000828:	2005      	movs	r0, #5
 800082a:	f000 f8a6 	bl	800097a <mdelay>

	write_to_4_bits(0x3);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f81a 	bl	8000868 <write_to_4_bits>

	udelay(150);
 8000834:	2096      	movs	r0, #150	@ 0x96
 8000836:	f000 f8b9 	bl	80009ac <udelay>


	write_to_4_bits(0x3);
 800083a:	2003      	movs	r0, #3
 800083c:	f000 f814 	bl	8000868 <write_to_4_bits>

	write_to_4_bits(0x2);
 8000840:	2002      	movs	r0, #2
 8000842:	f000 f811 	bl	8000868 <write_to_4_bits>


	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000846:	2028      	movs	r0, #40	@ 0x28
 8000848:	f7ff ff2c 	bl	80006a4 <lcd_send_command>

	lcd_send_command(LCD_CMD_DON_CURON);
 800084c:	200e      	movs	r0, #14
 800084e:	f7ff ff29 	bl	80006a4 <lcd_send_command>


	lcd_display_clear();
 8000852:	f000 f87e 	bl	8000952 <lcd_display_clear>


	lcd_send_command(LCD_CMD_INCADD);
 8000856:	2006      	movs	r0, #6
 8000858:	f7ff ff24 	bl	80006a4 <lcd_send_command>



}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020c00 	.word	0x40020c00

08000868 <write_to_4_bits>:




static void write_to_4_bits(uint8_t value){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0 ) & 0x1));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	210c      	movs	r1, #12
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <write_to_4_bits+0x6c>)
 8000880:	f000 facc 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1 ) & 0x1));
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	210d      	movs	r1, #13
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <write_to_4_bits+0x6c>)
 8000896:	f000 fac1 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2 ) & 0x1));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	210e      	movs	r1, #14
 80008aa:	480a      	ldr	r0, [pc, #40]	@ (80008d4 <write_to_4_bits+0x6c>)
 80008ac:	f000 fab6 	bl	8000e1c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3 ) & 0x1));
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	210f      	movs	r1, #15
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <write_to_4_bits+0x6c>)
 80008c2:	f000 faab 	bl	8000e1c <GPIO_WriteToOutputPin>


	lcd_enable();
 80008c6:	f000 f807 	bl	80008d8 <lcd_enable>



}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <lcd_enable>:



static void lcd_enable(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN,GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	210b      	movs	r1, #11
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <lcd_enable+0x28>)
 80008e2:	f000 fa9b 	bl	8000e1c <GPIO_WriteToOutputPin>
	udelay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f000 f860 	bl	80009ac <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN,GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	210b      	movs	r1, #11
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <lcd_enable+0x28>)
 80008f2:	f000 fa93 	bl	8000e1c <GPIO_WriteToOutputPin>
	udelay(100);
 80008f6:	2064      	movs	r0, #100	@ 0x64
 80008f8:	f000 f858 	bl	80009ac <udelay>



}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020c00 	.word	0x40020c00

08000904 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	71bb      	strb	r3, [r7, #6]
  column--;
 8000914:	79bb      	ldrb	r3, [r7, #6]
 8000916:	3b01      	subs	r3, #1
 8000918:	71bb      	strb	r3, [r7, #6]
  switch (row)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d002      	beq.n	8000926 <lcd_set_cursor+0x22>
 8000920:	2b02      	cmp	r3, #2
 8000922:	d009      	beq.n	8000938 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000924:	e011      	b.n	800094a <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff feb7 	bl	80006a4 <lcd_send_command>
      break;
 8000936:	e008      	b.n	800094a <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800093e:	71bb      	strb	r3, [r7, #6]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff feae 	bl	80006a4 <lcd_send_command>
      break;
 8000948:	bf00      	nop
  }
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <lcd_display_clear>:

void lcd_display_clear(void){
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fea4 	bl	80006a4 <lcd_send_command>
	mdelay(2);
 800095c:	2002      	movs	r0, #2
 800095e:	f000 f80c 	bl	800097a <mdelay>

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <lcd_display_return_home>:



void lcd_display_return_home(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff fe9a 	bl	80006a4 <lcd_send_command>


	mdelay(2);
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f802 	bl	800097a <mdelay>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}

0800097a <mdelay>:



static void mdelay(uint32_t cnt)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e002      	b.n	800098e <mdelay+0x14>
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	429a      	cmp	r2, r3
 800099c:	d3f4      	bcc.n	8000988 <mdelay+0xe>
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <udelay>:

static void udelay(uint32_t cnt)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e002      	b.n	80009c0 <udelay+0x14>
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3f8      	bcc.n	80009ba <udelay+0xe>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <GPIO_PeriClockControl>:
#include "stm32f407xx_gpio_driver.h"



void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d161      	bne.n	8000aae <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <GPIO_PeriClockControl+0xe4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009f2:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a32      	ldr	r2, [pc, #200]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 80009fe:	e056      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a30      	ldr	r2, [pc, #192]	@ (8000ac4 <GPIO_PeriClockControl+0xec>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d106      	bne.n	8000a16 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a14:	e04b      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac8 <GPIO_PeriClockControl+0xf0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d106      	bne.n	8000a2c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a27      	ldr	r2, [pc, #156]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a2a:	e040      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <GPIO_PeriClockControl+0xf4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d106      	bne.n	8000a42 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a40:	e035      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <GPIO_PeriClockControl+0xf8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a56:	e02a      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <GPIO_PeriClockControl+0xfc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a6c:	e01f      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <GPIO_PeriClockControl+0x100>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a11      	ldr	r2, [pc, #68]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a82:	e014      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <GPIO_PeriClockControl+0x104>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d106      	bne.n	8000a9a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a98:	e009      	b.n	8000aae <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <GPIO_PeriClockControl+0x108>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d105      	bne.n	8000aae <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <GPIO_PeriClockControl+0xe8>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40021c00 	.word	0x40021c00
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <GPIO_Init>:




void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff6e 	bl	80009d8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d820      	bhi.n	8000b46 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2103      	movs	r1, #3
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	400a      	ands	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6819      	ldr	r1, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e0cb      	b.n	8000cde <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	795b      	ldrb	r3, [r3, #5]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d117      	bne.n	8000b7e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c7c <GPIO_Init+0x198>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	7912      	ldrb	r2, [r2, #4]
 8000b56:	4611      	mov	r1, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	408a      	lsls	r2, r1
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4a47      	ldr	r2, [pc, #284]	@ (8000c7c <GPIO_Init+0x198>)
 8000b60:	430b      	orrs	r3, r1
 8000b62:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b64:	4b45      	ldr	r3, [pc, #276]	@ (8000c7c <GPIO_Init+0x198>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	7912      	ldrb	r2, [r2, #4]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	2201      	movs	r2, #1
 8000b70:	408a      	lsls	r2, r1
 8000b72:	43d2      	mvns	r2, r2
 8000b74:	4611      	mov	r1, r2
 8000b76:	4a41      	ldr	r2, [pc, #260]	@ (8000c7c <GPIO_Init+0x198>)
 8000b78:	400b      	ands	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]
 8000b7c:	e035      	b.n	8000bea <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	795b      	ldrb	r3, [r3, #5]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d117      	bne.n	8000bb6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b86:	4b3d      	ldr	r3, [pc, #244]	@ (8000c7c <GPIO_Init+0x198>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	7912      	ldrb	r2, [r2, #4]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	2201      	movs	r2, #1
 8000b92:	408a      	lsls	r2, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <GPIO_Init+0x198>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <GPIO_Init+0x198>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	7912      	ldrb	r2, [r2, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	408a      	lsls	r2, r1
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	4611      	mov	r1, r2
 8000bae:	4a33      	ldr	r2, [pc, #204]	@ (8000c7c <GPIO_Init+0x198>)
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	60d3      	str	r3, [r2, #12]
 8000bb4:	e019      	b.n	8000bea <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d115      	bne.n	8000bea <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <GPIO_Init+0x198>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7912      	ldrb	r2, [r2, #4]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	2201      	movs	r2, #1
 8000bca:	408a      	lsls	r2, r1
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4a2b      	ldr	r2, [pc, #172]	@ (8000c7c <GPIO_Init+0x198>)
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <GPIO_Init+0x198>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	7912      	ldrb	r2, [r2, #4]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2201      	movs	r2, #1
 8000be0:	408a      	lsls	r2, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	4a25      	ldr	r2, [pc, #148]	@ (8000c7c <GPIO_Init+0x198>)
 8000be6:	430b      	orrs	r3, r1
 8000be8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1f      	ldr	r2, [pc, #124]	@ (8000c80 <GPIO_Init+0x19c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d04e      	beq.n	8000ca4 <GPIO_Init+0x1c0>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <GPIO_Init+0x1a0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d032      	beq.n	8000c76 <GPIO_Init+0x192>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <GPIO_Init+0x1a4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d02b      	beq.n	8000c72 <GPIO_Init+0x18e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <GPIO_Init+0x1a8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d024      	beq.n	8000c6e <GPIO_Init+0x18a>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <GPIO_Init+0x1ac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01d      	beq.n	8000c6a <GPIO_Init+0x186>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <GPIO_Init+0x1b0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d016      	beq.n	8000c66 <GPIO_Init+0x182>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <GPIO_Init+0x1b4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00f      	beq.n	8000c62 <GPIO_Init+0x17e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a15      	ldr	r2, [pc, #84]	@ (8000c9c <GPIO_Init+0x1b8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d008      	beq.n	8000c5e <GPIO_Init+0x17a>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a13      	ldr	r2, [pc, #76]	@ (8000ca0 <GPIO_Init+0x1bc>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <GPIO_Init+0x176>
 8000c56:	2308      	movs	r3, #8
 8000c58:	e025      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e023      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c5e:	2307      	movs	r3, #7
 8000c60:	e021      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c62:	2306      	movs	r3, #6
 8000c64:	e01f      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c66:	2305      	movs	r3, #5
 8000c68:	e01d      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	e01b      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e019      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e017      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c76:	2301      	movs	r3, #1
 8000c78:	e015      	b.n	8000ca6 <GPIO_Init+0x1c2>
 8000c7a:	bf00      	nop
 8000c7c:	40013c00 	.word	0x40013c00
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021400 	.word	0x40021400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40021c00 	.word	0x40021c00
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000ca8:	4b59      	ldr	r3, [pc, #356]	@ (8000e10 <GPIO_Init+0x32c>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cac:	4a58      	ldr	r2, [pc, #352]	@ (8000e10 <GPIO_Init+0x32c>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000cb4:	7c7a      	ldrb	r2, [r7, #17]
 8000cb6:	7cbb      	ldrb	r3, [r7, #18]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	fa02 f103 	lsl.w	r1, r2, r3
 8000cbe:	4a55      	ldr	r2, [pc, #340]	@ (8000e14 <GPIO_Init+0x330>)
 8000cc0:	7cfb      	ldrb	r3, [r7, #19]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000cc8:	4b53      	ldr	r3, [pc, #332]	@ (8000e18 <GPIO_Init+0x334>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	7912      	ldrb	r2, [r2, #4]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	408a      	lsls	r2, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e18 <GPIO_Init+0x334>)
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	791b      	ldrb	r3, [r3, #4]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6899      	ldr	r1, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	79db      	ldrb	r3, [r3, #7]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4619      	mov	r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68d9      	ldr	r1, [r3, #12]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a1b      	ldrb	r3, [r3, #8]
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	791b      	ldrb	r3, [r3, #4]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	400a      	ands	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6859      	ldr	r1, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d131      	bne.n	8000e06 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7c3a      	ldrb	r2, [r7, #16]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7c3a      	ldrb	r2, [r7, #16]
 8000dd4:	4001      	ands	r1, r0
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	7c3a      	ldrb	r2, [r7, #16]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7a5b      	ldrb	r3, [r3, #9]
 8000dec:	461a      	mov	r2, r3
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	7c3a      	ldrb	r2, [r7, #16]
 8000dfe:	4301      	orrs	r1, r0
 8000e00:	3208      	adds	r2, #8
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <GPIO_WriteToOutputPin>:
}



void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000e2c:	78bb      	ldrb	r3, [r7, #2]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d109      	bne.n	8000e46 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000e44:	e009      	b.n	8000e5a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	615a      	str	r2, [r3, #20]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000ea0:	78fa      	ldrb	r2, [r7, #3]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	611a      	str	r2, [r3, #16]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000ecc:	78fa      	ldrb	r2, [r7, #3]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	611a      	str	r2, [r3, #16]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01f      	beq.n	8000f34 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f1b      	ldrb	r3, [r3, #28]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d112      	bne.n	8000f22 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d11f      	bne.n	8000f44 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fa3b 	bl	8001386 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000f20:	e010      	b.n	8000f44 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	60fb      	str	r3, [r7, #12]
}
 8000f32:	e007      	b.n	8000f44 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	60fb      	str	r3, [r7, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <I2C_PeripheralControl>:
 }



void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d106      	bne.n	8000f8c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000f8a:	e005      	b.n	8000f98 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 0201 	bic.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <I2C_PeriClockControl>:



void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d11f      	bne.n	8000ff6 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <I2C_PeriClockControl+0x60>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d106      	bne.n	8000fcc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fc8:	6413      	str	r3, [r2, #64]	@ 0x40
	else
	{
		//TODO
	}

}
 8000fca:	e014      	b.n	8000ff6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <I2C_PeriClockControl+0x68>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d106      	bne.n	8000fe2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fe0:	e009      	b.n	8000ff6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <I2C_PeriClockControl+0x6c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d105      	bne.n	8000ff6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <I2C_PeriClockControl+0x64>)
 8000ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40005400 	.word	0x40005400
 8001008:	40023800 	.word	0x40023800
 800100c:	40005800 	.word	0x40005800
 8001010:	40005c00 	.word	0x40005c00

08001014 <I2C_Init>:




void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ffbc 	bl	8000fa4 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7a5b      	ldrb	r3, [r3, #9]
 8001030:	029b      	lsls	r3, r3, #10
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8001044:	f000 f9bc 	bl	80013c0 <RCC_GetPCLK1Value>
 8001048:	4603      	mov	r3, r0
 800104a:	4a47      	ldr	r2, [pc, #284]	@ (8001168 <I2C_Init+0x154>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001062:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7a1b      	ldrb	r3, [r3, #8]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a36      	ldr	r2, [pc, #216]	@ (800116c <I2C_Init+0x158>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d80f      	bhi.n	80010b6 <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001096:	f000 f993 	bl	80013c0 <RCC_GetPCLK1Value>
 800109a:	4602      	mov	r2, r0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80010a8:	897b      	ldrh	r3, [r7, #10]
 80010aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e02c      	b.n	8001110 <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010bc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7a9b      	ldrb	r3, [r3, #10]
 80010c2:	039b      	lsls	r3, r3, #14
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7a9b      	ldrb	r3, [r3, #10]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10b      	bne.n	80010ea <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80010d2:	f000 f975 	bl	80013c0 <RCC_GetPCLK1Value>
 80010d6:	4601      	mov	r1, r0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e6:	817b      	strh	r3, [r7, #10]
 80010e8:	e00c      	b.n	8001104 <I2C_Init+0xf0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80010ea:	f000 f969 	bl	80013c0 <RCC_GetPCLK1Value>
 80010ee:	4601      	mov	r1, r0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	009a      	lsls	r2, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001102:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001104:	897b      	ldrh	r3, [r7, #10]
 8001106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a13      	ldr	r2, [pc, #76]	@ (800116c <I2C_Init+0x158>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d809      	bhi.n	8001136 <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8001122:	f000 f94d 	bl	80013c0 <RCC_GetPCLK1Value>
 8001126:	4603      	mov	r3, r0
 8001128:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <I2C_Init+0x154>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9b      	lsrs	r3, r3, #18
 8001130:	3301      	adds	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e00d      	b.n	8001152 <I2C_Init+0x13e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8001136:	f000 f943 	bl	80013c0 <RCC_GetPCLK1Value>
 800113a:	4603      	mov	r3, r0
 800113c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	0a5b      	lsrs	r3, r3, #9
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <I2C_Init+0x15c>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	09db      	lsrs	r3, r3, #7
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800115c:	621a      	str	r2, [r3, #32]

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	431bde83 	.word	0x431bde83
 800116c:	000186a0 	.word	0x000186a0
 8001170:	00044b83 	.word	0x00044b83

08001174 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe59 	bl	8000e66 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80011b4:	bf00      	nop
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffd9 	bl	8001174 <I2C_GetFlagStatus>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f6      	beq.n	80011b6 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe58 	bl	8000e86 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80011d6:	bf00      	nop
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffc8 	bl	8001174 <I2C_GetFlagStatus>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f6      	beq.n	80011d8 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fe77 	bl	8000ede <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80011f0:	e014      	b.n	800121c <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80011f2:	bf00      	nop
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ffba 	bl	8001174 <I2C_GetFlagStatus>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f6      	beq.n	80011f4 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3301      	adds	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
		Len--;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3b01      	subs	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1e7      	bne.n	80011f2 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8001222:	bf00      	nop
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2180      	movs	r1, #128	@ 0x80
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffa2 	bl	8001174 <I2C_GetFlagStatus>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f6      	beq.n	8001224 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8001236:	bf00      	nop
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2104      	movs	r1, #4
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff98 	bl	8001174 <I2C_GetFlagStatus>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f6      	beq.n	8001238 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800124a:	7e3b      	ldrb	r3, [r7, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d104      	bne.n	800125a <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe79 	bl	8000f4c <I2C_GenerateStopCondition>

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	4611      	mov	r1, r2
 800126e:	461a      	mov	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fdf2 	bl	8000e66 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001282:	bf00      	nop
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff72 	bl	8001174 <I2C_GetFlagStatus>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f6      	beq.n	8001284 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	79ba      	ldrb	r2, [r7, #6]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe07 	bl	8000eb2 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80012a4:	bf00      	nop
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2102      	movs	r1, #2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff61 	bl	8001174 <I2C_GetFlagStatus>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f6      	beq.n	80012a6 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d121      	bne.n	8001302 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f85e 	bl	8001386 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff fe07 	bl	8000ede <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80012d0:	bf00      	nop
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2140      	movs	r1, #64	@ 0x40
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff4b 	bl	8001174 <I2C_GetFlagStatus>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f6      	beq.n	80012d2 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80012e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe2b 	bl	8000f4c <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d930      	bls.n	800136a <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fde8 	bl	8000ede <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e027      	b.n	8001364 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001314:	bf00      	nop
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2140      	movs	r1, #64	@ 0x40
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff29 	bl	8001174 <I2C_GetFlagStatus>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f6      	beq.n	8001316 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d10e      	bne.n	800134c <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f826 	bl	8001386 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 800133a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d104      	bne.n	800134c <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe00 	bl	8000f4c <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3b01      	subs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1d4      	bne.n	8001314 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7a5b      	ldrb	r3, [r3, #9]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d105      	bne.n	800137e <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f804 	bl	8001386 <I2C_ManageAcking>
	}

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d106      	bne.n	80013a6 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80013a4:	e005      	b.n	80013b2 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <RCC_GetPCLK1Value+0x94>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80013d4:	7a7b      	ldrb	r3, [r7, #9]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <RCC_GetPCLK1Value+0x98>)
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e004      	b.n	80013ea <RCC_GetPCLK1Value+0x2a>
	}else if(clksrc == 1)
 80013e0:	7a7b      	ldrb	r3, [r7, #9]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <RCC_GetPCLK1Value+0x2a>
	{
		SystemClk = 8000000;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <RCC_GetPCLK1Value+0x9c>)
 80013e8:	60fb      	str	r3, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <RCC_GetPCLK1Value+0x94>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80013f8:	7a3b      	ldrb	r3, [r7, #8]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d802      	bhi.n	8001404 <RCC_GetPCLK1Value+0x44>
	{
		ahbp = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	72fb      	strb	r3, [r7, #11]
 8001402:	e005      	b.n	8001410 <RCC_GetPCLK1Value+0x50>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	3b08      	subs	r3, #8
 8001408:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <RCC_GetPCLK1Value+0xa0>)
 800140a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800140e:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <RCC_GetPCLK1Value+0x94>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	0a9b      	lsrs	r3, r3, #10
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d802      	bhi.n	800142a <RCC_GetPCLK1Value+0x6a>
	{
		apb1p = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	72bb      	strb	r3, [r7, #10]
 8001428:	e004      	b.n	8001434 <RCC_GetPCLK1Value+0x74>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800142a:	7a3b      	ldrb	r3, [r7, #8]
 800142c:	3b04      	subs	r3, #4
 800142e:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <RCC_GetPCLK1Value+0xa4>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	fbb2 f2f3 	udiv	r2, r2, r3
 800143c:	7abb      	ldrb	r3, [r7, #10]
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	00f42400 	.word	0x00f42400
 800145c:	007a1200 	.word	0x007a1200
 8001460:	20000000 	.word	0x20000000
 8001464:	20000010 	.word	0x20000010

08001468 <mdelay>:
extern void initialise_monitor_handles();

#define SYSTICK_TIM_CLK 16000000UL

static void mdelay(uint32_t cnt)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e002      	b.n	800147c <mdelay+0x14>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3f4      	bcc.n	8001476 <mdelay+0xe>
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <init_systick_timer>:


void init_systick_timer(uint32_t tick_hz)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <init_systick_timer+0x60>)
 80014a6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <init_systick_timer+0x64>)
 80014aa:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80014ac:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <init_systick_timer+0x68>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f043 0202 	orr.w	r2, r3, #2
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f043 0204 	orr.w	r2, r3, #4
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

}
 80014ee:	bf00      	nop
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e014 	.word	0xe000e014
 8001500:	e000e010 	.word	0xe000e010
 8001504:	00f42400 	.word	0x00f42400

08001508 <get_day_of_week>:




char* get_day_of_week(uint8_t i)
{
 8001508:	b4b0      	push	{r4, r5, r7}
 800150a:	b08b      	sub	sp, #44	@ 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <get_day_of_week+0x38>)
 8001514:	f107 040c 	add.w	r4, r7, #12
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001522:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	3b01      	subs	r3, #1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	3328      	adds	r3, #40	@ 0x28
 800152e:	443b      	add	r3, r7
 8001530:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8001534:	4618      	mov	r0, r3
 8001536:	372c      	adds	r7, #44	@ 0x2c
 8001538:	46bd      	mov	sp, r7
 800153a:	bcb0      	pop	{r4, r5, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	08002cfc 	.word	0x08002cfc

08001544 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b09      	cmp	r3, #9
 8001554:	d809      	bhi.n	800156a <number_to_string+0x26>
		buf[0] = '0';
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2230      	movs	r2, #48	@ 0x30
 800155a:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	3230      	adds	r2, #48	@ 0x30
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 8001568:	e01f      	b.n	80015aa <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d91c      	bls.n	80015aa <number_to_string+0x66>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b62      	cmp	r3, #98	@ 0x62
 8001574:	d819      	bhi.n	80015aa <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <number_to_string+0x74>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3330      	adds	r3, #48	@ 0x30
 8001584:	b2da      	uxtb	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <number_to_string+0x74>)
 800158e:	fba3 1302 	umull	r1, r3, r3, r2
 8001592:	08d9      	lsrs	r1, r3, #3
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	3230      	adds	r2, #48	@ 0x30
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	cccccccd 	.word	0xcccccccd

080015bc <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <time_to_string+0x48>)
 80015c6:	223a      	movs	r2, #58	@ 0x3a
 80015c8:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <time_to_string+0x48>)
 80015cc:	223a      	movs	r2, #58	@ 0x3a
 80015ce:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	490b      	ldr	r1, [pc, #44]	@ (8001604 <time_to_string+0x48>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ffb4 	bl	8001544 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	4909      	ldr	r1, [pc, #36]	@ (8001608 <time_to_string+0x4c>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ffae 	bl	8001544 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <time_to_string+0x50>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ffa8 	bl	8001544 <number_to_string>

	buf[8] = '\0';
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <time_to_string+0x48>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	721a      	strb	r2, [r3, #8]

	return buf;
 80015fa:	4b02      	ldr	r3, [pc, #8]	@ (8001604 <time_to_string+0x48>)

}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200000c0 	.word	0x200000c0
 8001608:	200000c3 	.word	0x200000c3
 800160c:	200000c6 	.word	0x200000c6

08001610 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <date_to_string+0x48>)
 800161a:	222f      	movs	r2, #47	@ 0x2f
 800161c:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <date_to_string+0x48>)
 8001620:	222f      	movs	r2, #47	@ 0x2f
 8001622:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	490b      	ldr	r1, [pc, #44]	@ (8001658 <date_to_string+0x48>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff8a 	bl	8001544 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4909      	ldr	r1, [pc, #36]	@ (800165c <date_to_string+0x4c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff84 	bl	8001544 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	789b      	ldrb	r3, [r3, #2]
 8001640:	4907      	ldr	r1, [pc, #28]	@ (8001660 <date_to_string+0x50>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff7e 	bl	8001544 <number_to_string>

	buf[8]= '\0';
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <date_to_string+0x48>)
 800164a:	2200      	movs	r2, #0
 800164c:	721a      	strb	r2, [r3, #8]

	return buf;
 800164e:	4b02      	ldr	r3, [pc, #8]	@ (8001658 <date_to_string+0x48>)

}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000cc 	.word	0x200000cc
 800165c:	200000cf 	.word	0x200000cf
 8001660:	200000d2 	.word	0x200000d2

08001664 <main>:



int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	initialise_monitor_handles();
 800166a:	f001 fa95 	bl	8002b98 <initialise_monitor_handles>

	printf("RTC test\n");
 800166e:	4837      	ldr	r0, [pc, #220]	@ (800174c <main+0xe8>)
 8001670:	f000 f9f8 	bl	8001a64 <puts>

	lcd_init();
 8001674:	f7ff f86e 	bl	8000754 <lcd_init>

	lcd_print_string("RTC Test...");
 8001678:	4835      	ldr	r0, [pc, #212]	@ (8001750 <main+0xec>)
 800167a:	f7ff f857 	bl	800072c <lcd_print_string>


	mdelay(2000);
 800167e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001682:	f7ff fef1 	bl	8001468 <mdelay>

	lcd_display_clear();
 8001686:	f7ff f964 	bl	8000952 <lcd_display_clear>
	lcd_display_return_home();
 800168a:	f7ff f96c 	bl	8000966 <lcd_display_return_home>


	if(ds1307_init()){
 800168e:	f7fe fe21 	bl	80002d4 <ds1307_init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <main+0x3e>
		printf("RTC init has failed\n");
 8001698:	482e      	ldr	r0, [pc, #184]	@ (8001754 <main+0xf0>)
 800169a:	f000 f9e3 	bl	8001a64 <puts>
		while(1);
 800169e:	bf00      	nop
 80016a0:	e7fd      	b.n	800169e <main+0x3a>
	}

	init_systick_timer(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fefa 	bl	800149c <init_systick_timer>


	current_date.day = FRIDAY;
 80016a8:	2306      	movs	r3, #6
 80016aa:	71fb      	strb	r3, [r7, #7]
	current_date.date = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	713b      	strb	r3, [r7, #4]
	current_date.month = 8;
 80016b0:	2308      	movs	r3, #8
 80016b2:	717b      	strb	r3, [r7, #5]
	current_date.year = 24;
 80016b4:	2318      	movs	r3, #24
 80016b6:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 12;
 80016b8:	230c      	movs	r3, #12
 80016ba:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 43;
 80016bc:	232b      	movs	r3, #43	@ 0x2b
 80016be:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 20;
 80016c0:	2314      	movs	r3, #20
 80016c2:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_AM;
 80016c4:	2300      	movs	r3, #0
 80016c6:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe69 	bl	80003a2 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe1b 	bl	8000310 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fe8f 	bl	8000402 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fed4 	bl	8000494 <ds1307_get_current_date>



	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d013      	beq.n	800171a <main+0xb6>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <main+0x98>
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <main+0xf4>)
 80016fa:	e000      	b.n	80016fe <main+0x9a>
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <main+0xf8>)
 80016fe:	60fb      	str	r3, [r7, #12]

		//printf("Current time = %s %s\n",time_to_string(&current_time),am_pm);
		lcd_print_string(time_to_string(&current_time));
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff59 	bl	80015bc <time_to_string>
 800170a:	4603      	mov	r3, r0
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f80d 	bl	800072c <lcd_print_string>
		lcd_print_string(am_pm);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff f80a 	bl	800072c <lcd_print_string>
 8001718:	e009      	b.n	800172e <main+0xca>

	}else{

		printf("Current time = %s\n",time_to_string(&current_time));
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff4c 	bl	80015bc <time_to_string>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <main+0xfc>)
 800172a:	f000 f933 	bl	8001994 <iprintf>


	}

	//printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f7ff f8e7 	bl	8000904 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff69 	bl	8001610 <date_to_string>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fff3 	bl	800072c <lcd_print_string>



	while(1);
 8001746:	bf00      	nop
 8001748:	e7fd      	b.n	8001746 <main+0xe2>
 800174a:	bf00      	nop
 800174c:	08002d18 	.word	0x08002d18
 8001750:	08002d24 	.word	0x08002d24
 8001754:	08002d30 	.word	0x08002d30
 8001758:	08002d44 	.word	0x08002d44
 800175c:	08002d48 	.word	0x08002d48
 8001760:	08002d4c 	.word	0x08002d4c

08001764 <SysTick_Handler>:

	return 0;
}


void SysTick_Handler(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe47 	bl	8000402 <ds1307_get_current_time>


	lcd_set_cursor(1, 1);
 8001774:	2101      	movs	r1, #1
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff f8c4 	bl	8000904 <lcd_set_cursor>
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d013      	beq.n	80017aa <SysTick_Handler+0x46>
			am_pm = (current_time.time_format) ? "PM" : "AM";
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SysTick_Handler+0x28>
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <SysTick_Handler+0xa0>)
 800178a:	e000      	b.n	800178e <SysTick_Handler+0x2a>
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <SysTick_Handler+0xa4>)
 800178e:	60fb      	str	r3, [r7, #12]

			//printf("Current time = %s %s\n",time_to_string(&current_time),am_pm);
			lcd_print_string(time_to_string(&current_time));
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff11 	bl	80015bc <time_to_string>
 800179a:	4603      	mov	r3, r0
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ffc5 	bl	800072c <lcd_print_string>
			lcd_print_string(am_pm);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7fe ffc2 	bl	800072c <lcd_print_string>
 80017a8:	e008      	b.n	80017bc <SysTick_Handler+0x58>

		}else{

			//printf("Current time = %s\n",time_to_string(&current_time));
			lcd_print_string(time_to_string(&current_time));
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff04 	bl	80015bc <time_to_string>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe ffb8 	bl	800072c <lcd_print_string>

		}


	ds1307_get_current_date(&current_date);
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe68 	bl	8000494 <ds1307_get_current_date>
	lcd_set_cursor(2, 1);
 80017c4:	2101      	movs	r1, #1
 80017c6:	2002      	movs	r0, #2
 80017c8:	f7ff f89c 	bl	8000904 <lcd_set_cursor>
	//printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 80017cc:	2101      	movs	r1, #1
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff f898 	bl	8000904 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff1a 	bl	8001610 <date_to_string>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe ffa4 	bl	800072c <lcd_print_string>
	lcd_print_string(" ");
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <SysTick_Handler+0xa8>)
 80017e6:	f7fe ffa1 	bl	800072c <lcd_print_string>
	lcd_print_string(get_day_of_week(current_date.day));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fe8b 	bl	8001508 <get_day_of_week>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe ff99 	bl	800072c <lcd_print_string>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08002d44 	.word	0x08002d44
 8001808:	08002d48 	.word	0x08002d48
 800180c:	08002d60 	.word	0x08002d60

08001810 <std>:
 8001810:	2300      	movs	r3, #0
 8001812:	b510      	push	{r4, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	e9c0 3300 	strd	r3, r3, [r0]
 800181a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800181e:	6083      	str	r3, [r0, #8]
 8001820:	8181      	strh	r1, [r0, #12]
 8001822:	6643      	str	r3, [r0, #100]	@ 0x64
 8001824:	81c2      	strh	r2, [r0, #14]
 8001826:	6183      	str	r3, [r0, #24]
 8001828:	4619      	mov	r1, r3
 800182a:	2208      	movs	r2, #8
 800182c:	305c      	adds	r0, #92	@ 0x5c
 800182e:	f000 f9f9 	bl	8001c24 <memset>
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <std+0x58>)
 8001834:	6263      	str	r3, [r4, #36]	@ 0x24
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <std+0x5c>)
 8001838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <std+0x60>)
 800183c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <std+0x64>)
 8001840:	6323      	str	r3, [r4, #48]	@ 0x30
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <std+0x68>)
 8001844:	6224      	str	r4, [r4, #32]
 8001846:	429c      	cmp	r4, r3
 8001848:	d006      	beq.n	8001858 <std+0x48>
 800184a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800184e:	4294      	cmp	r4, r2
 8001850:	d002      	beq.n	8001858 <std+0x48>
 8001852:	33d0      	adds	r3, #208	@ 0xd0
 8001854:	429c      	cmp	r4, r3
 8001856:	d105      	bne.n	8001864 <std+0x54>
 8001858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001860:	f000 ba52 	b.w	8001d08 <__retarget_lock_init_recursive>
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	08001a75 	.word	0x08001a75
 800186c:	08001a97 	.word	0x08001a97
 8001870:	08001acf 	.word	0x08001acf
 8001874:	08001af3 	.word	0x08001af3
 8001878:	200000d8 	.word	0x200000d8

0800187c <stdio_exit_handler>:
 800187c:	4a02      	ldr	r2, [pc, #8]	@ (8001888 <stdio_exit_handler+0xc>)
 800187e:	4903      	ldr	r1, [pc, #12]	@ (800188c <stdio_exit_handler+0x10>)
 8001880:	4803      	ldr	r0, [pc, #12]	@ (8001890 <stdio_exit_handler+0x14>)
 8001882:	f000 b869 	b.w	8001958 <_fwalk_sglue>
 8001886:	bf00      	nop
 8001888:	20000014 	.word	0x20000014
 800188c:	080025a9 	.word	0x080025a9
 8001890:	20000024 	.word	0x20000024

08001894 <cleanup_stdio>:
 8001894:	6841      	ldr	r1, [r0, #4]
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <cleanup_stdio+0x34>)
 8001898:	4299      	cmp	r1, r3
 800189a:	b510      	push	{r4, lr}
 800189c:	4604      	mov	r4, r0
 800189e:	d001      	beq.n	80018a4 <cleanup_stdio+0x10>
 80018a0:	f000 fe82 	bl	80025a8 <_fflush_r>
 80018a4:	68a1      	ldr	r1, [r4, #8]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <cleanup_stdio+0x38>)
 80018a8:	4299      	cmp	r1, r3
 80018aa:	d002      	beq.n	80018b2 <cleanup_stdio+0x1e>
 80018ac:	4620      	mov	r0, r4
 80018ae:	f000 fe7b 	bl	80025a8 <_fflush_r>
 80018b2:	68e1      	ldr	r1, [r4, #12]
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <cleanup_stdio+0x3c>)
 80018b6:	4299      	cmp	r1, r3
 80018b8:	d004      	beq.n	80018c4 <cleanup_stdio+0x30>
 80018ba:	4620      	mov	r0, r4
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c0:	f000 be72 	b.w	80025a8 <_fflush_r>
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	200000d8 	.word	0x200000d8
 80018cc:	20000140 	.word	0x20000140
 80018d0:	200001a8 	.word	0x200001a8

080018d4 <global_stdio_init.part.0>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <global_stdio_init.part.0+0x30>)
 80018d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001908 <global_stdio_init.part.0+0x34>)
 80018da:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <global_stdio_init.part.0+0x38>)
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4620      	mov	r0, r4
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	f7ff ff94 	bl	8001810 <std>
 80018e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80018ec:	2201      	movs	r2, #1
 80018ee:	2109      	movs	r1, #9
 80018f0:	f7ff ff8e 	bl	8001810 <std>
 80018f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80018f8:	2202      	movs	r2, #2
 80018fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018fe:	2112      	movs	r1, #18
 8001900:	f7ff bf86 	b.w	8001810 <std>
 8001904:	20000210 	.word	0x20000210
 8001908:	200000d8 	.word	0x200000d8
 800190c:	0800187d 	.word	0x0800187d

08001910 <__sfp_lock_acquire>:
 8001910:	4801      	ldr	r0, [pc, #4]	@ (8001918 <__sfp_lock_acquire+0x8>)
 8001912:	f000 b9fa 	b.w	8001d0a <__retarget_lock_acquire_recursive>
 8001916:	bf00      	nop
 8001918:	20000219 	.word	0x20000219

0800191c <__sfp_lock_release>:
 800191c:	4801      	ldr	r0, [pc, #4]	@ (8001924 <__sfp_lock_release+0x8>)
 800191e:	f000 b9f5 	b.w	8001d0c <__retarget_lock_release_recursive>
 8001922:	bf00      	nop
 8001924:	20000219 	.word	0x20000219

08001928 <__sinit>:
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	f7ff fff0 	bl	8001910 <__sfp_lock_acquire>
 8001930:	6a23      	ldr	r3, [r4, #32]
 8001932:	b11b      	cbz	r3, 800193c <__sinit+0x14>
 8001934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001938:	f7ff bff0 	b.w	800191c <__sfp_lock_release>
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <__sinit+0x28>)
 800193e:	6223      	str	r3, [r4, #32]
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__sinit+0x2c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f5      	bne.n	8001934 <__sinit+0xc>
 8001948:	f7ff ffc4 	bl	80018d4 <global_stdio_init.part.0>
 800194c:	e7f2      	b.n	8001934 <__sinit+0xc>
 800194e:	bf00      	nop
 8001950:	08001895 	.word	0x08001895
 8001954:	20000210 	.word	0x20000210

08001958 <_fwalk_sglue>:
 8001958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800195c:	4607      	mov	r7, r0
 800195e:	4688      	mov	r8, r1
 8001960:	4614      	mov	r4, r2
 8001962:	2600      	movs	r6, #0
 8001964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001968:	f1b9 0901 	subs.w	r9, r9, #1
 800196c:	d505      	bpl.n	800197a <_fwalk_sglue+0x22>
 800196e:	6824      	ldr	r4, [r4, #0]
 8001970:	2c00      	cmp	r4, #0
 8001972:	d1f7      	bne.n	8001964 <_fwalk_sglue+0xc>
 8001974:	4630      	mov	r0, r6
 8001976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800197a:	89ab      	ldrh	r3, [r5, #12]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d907      	bls.n	8001990 <_fwalk_sglue+0x38>
 8001980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001984:	3301      	adds	r3, #1
 8001986:	d003      	beq.n	8001990 <_fwalk_sglue+0x38>
 8001988:	4629      	mov	r1, r5
 800198a:	4638      	mov	r0, r7
 800198c:	47c0      	blx	r8
 800198e:	4306      	orrs	r6, r0
 8001990:	3568      	adds	r5, #104	@ 0x68
 8001992:	e7e9      	b.n	8001968 <_fwalk_sglue+0x10>

08001994 <iprintf>:
 8001994:	b40f      	push	{r0, r1, r2, r3}
 8001996:	b507      	push	{r0, r1, r2, lr}
 8001998:	4906      	ldr	r1, [pc, #24]	@ (80019b4 <iprintf+0x20>)
 800199a:	ab04      	add	r3, sp, #16
 800199c:	6808      	ldr	r0, [r1, #0]
 800199e:	f853 2b04 	ldr.w	r2, [r3], #4
 80019a2:	6881      	ldr	r1, [r0, #8]
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f000 fad5 	bl	8001f54 <_vfiprintf_r>
 80019aa:	b003      	add	sp, #12
 80019ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80019b0:	b004      	add	sp, #16
 80019b2:	4770      	bx	lr
 80019b4:	20000020 	.word	0x20000020

080019b8 <_puts_r>:
 80019b8:	6a03      	ldr	r3, [r0, #32]
 80019ba:	b570      	push	{r4, r5, r6, lr}
 80019bc:	6884      	ldr	r4, [r0, #8]
 80019be:	4605      	mov	r5, r0
 80019c0:	460e      	mov	r6, r1
 80019c2:	b90b      	cbnz	r3, 80019c8 <_puts_r+0x10>
 80019c4:	f7ff ffb0 	bl	8001928 <__sinit>
 80019c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019ca:	07db      	lsls	r3, r3, #31
 80019cc:	d405      	bmi.n	80019da <_puts_r+0x22>
 80019ce:	89a3      	ldrh	r3, [r4, #12]
 80019d0:	0598      	lsls	r0, r3, #22
 80019d2:	d402      	bmi.n	80019da <_puts_r+0x22>
 80019d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019d6:	f000 f998 	bl	8001d0a <__retarget_lock_acquire_recursive>
 80019da:	89a3      	ldrh	r3, [r4, #12]
 80019dc:	0719      	lsls	r1, r3, #28
 80019de:	d502      	bpl.n	80019e6 <_puts_r+0x2e>
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d135      	bne.n	8001a52 <_puts_r+0x9a>
 80019e6:	4621      	mov	r1, r4
 80019e8:	4628      	mov	r0, r5
 80019ea:	f000 f8c5 	bl	8001b78 <__swsetup_r>
 80019ee:	b380      	cbz	r0, 8001a52 <_puts_r+0x9a>
 80019f0:	f04f 35ff 	mov.w	r5, #4294967295
 80019f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019f6:	07da      	lsls	r2, r3, #31
 80019f8:	d405      	bmi.n	8001a06 <_puts_r+0x4e>
 80019fa:	89a3      	ldrh	r3, [r4, #12]
 80019fc:	059b      	lsls	r3, r3, #22
 80019fe:	d402      	bmi.n	8001a06 <_puts_r+0x4e>
 8001a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a02:	f000 f983 	bl	8001d0c <__retarget_lock_release_recursive>
 8001a06:	4628      	mov	r0, r5
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da04      	bge.n	8001a18 <_puts_r+0x60>
 8001a0e:	69a2      	ldr	r2, [r4, #24]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc17      	bgt.n	8001a44 <_puts_r+0x8c>
 8001a14:	290a      	cmp	r1, #10
 8001a16:	d015      	beq.n	8001a44 <_puts_r+0x8c>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	6022      	str	r2, [r4, #0]
 8001a1e:	7019      	strb	r1, [r3, #0]
 8001a20:	68a3      	ldr	r3, [r4, #8]
 8001a22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a26:	3b01      	subs	r3, #1
 8001a28:	60a3      	str	r3, [r4, #8]
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d1ed      	bne.n	8001a0a <_puts_r+0x52>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da11      	bge.n	8001a56 <_puts_r+0x9e>
 8001a32:	4622      	mov	r2, r4
 8001a34:	210a      	movs	r1, #10
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 f85f 	bl	8001afa <__swbuf_r>
 8001a3c:	3001      	adds	r0, #1
 8001a3e:	d0d7      	beq.n	80019f0 <_puts_r+0x38>
 8001a40:	250a      	movs	r5, #10
 8001a42:	e7d7      	b.n	80019f4 <_puts_r+0x3c>
 8001a44:	4622      	mov	r2, r4
 8001a46:	4628      	mov	r0, r5
 8001a48:	f000 f857 	bl	8001afa <__swbuf_r>
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d1e7      	bne.n	8001a20 <_puts_r+0x68>
 8001a50:	e7ce      	b.n	80019f0 <_puts_r+0x38>
 8001a52:	3e01      	subs	r6, #1
 8001a54:	e7e4      	b.n	8001a20 <_puts_r+0x68>
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	6022      	str	r2, [r4, #0]
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e7ee      	b.n	8001a40 <_puts_r+0x88>
	...

08001a64 <puts>:
 8001a64:	4b02      	ldr	r3, [pc, #8]	@ (8001a70 <puts+0xc>)
 8001a66:	4601      	mov	r1, r0
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	f7ff bfa5 	b.w	80019b8 <_puts_r>
 8001a6e:	bf00      	nop
 8001a70:	20000020 	.word	0x20000020

08001a74 <__sread>:
 8001a74:	b510      	push	{r4, lr}
 8001a76:	460c      	mov	r4, r1
 8001a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a7c:	f000 f8fc 	bl	8001c78 <_read_r>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	bfab      	itete	ge
 8001a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a86:	89a3      	ldrhlt	r3, [r4, #12]
 8001a88:	181b      	addge	r3, r3, r0
 8001a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a8e:	bfac      	ite	ge
 8001a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a92:	81a3      	strhlt	r3, [r4, #12]
 8001a94:	bd10      	pop	{r4, pc}

08001a96 <__swrite>:
 8001a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9a:	461f      	mov	r7, r3
 8001a9c:	898b      	ldrh	r3, [r1, #12]
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4616      	mov	r6, r2
 8001aa6:	d505      	bpl.n	8001ab4 <__swrite+0x1e>
 8001aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aac:	2302      	movs	r3, #2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f000 f8d0 	bl	8001c54 <_lseek_r>
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001abe:	81a3      	strh	r3, [r4, #12]
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aca:	f000 b8e7 	b.w	8001c9c <_write_r>

08001ace <__sseek>:
 8001ace:	b510      	push	{r4, lr}
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad6:	f000 f8bd 	bl	8001c54 <_lseek_r>
 8001ada:	1c43      	adds	r3, r0, #1
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	bf15      	itete	ne
 8001ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001aea:	81a3      	strheq	r3, [r4, #12]
 8001aec:	bf18      	it	ne
 8001aee:	81a3      	strhne	r3, [r4, #12]
 8001af0:	bd10      	pop	{r4, pc}

08001af2 <__sclose>:
 8001af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af6:	f000 b89d 	b.w	8001c34 <_close_r>

08001afa <__swbuf_r>:
 8001afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afc:	460e      	mov	r6, r1
 8001afe:	4614      	mov	r4, r2
 8001b00:	4605      	mov	r5, r0
 8001b02:	b118      	cbz	r0, 8001b0c <__swbuf_r+0x12>
 8001b04:	6a03      	ldr	r3, [r0, #32]
 8001b06:	b90b      	cbnz	r3, 8001b0c <__swbuf_r+0x12>
 8001b08:	f7ff ff0e 	bl	8001928 <__sinit>
 8001b0c:	69a3      	ldr	r3, [r4, #24]
 8001b0e:	60a3      	str	r3, [r4, #8]
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	071a      	lsls	r2, r3, #28
 8001b14:	d501      	bpl.n	8001b1a <__swbuf_r+0x20>
 8001b16:	6923      	ldr	r3, [r4, #16]
 8001b18:	b943      	cbnz	r3, 8001b2c <__swbuf_r+0x32>
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f000 f82b 	bl	8001b78 <__swsetup_r>
 8001b22:	b118      	cbz	r0, 8001b2c <__swbuf_r+0x32>
 8001b24:	f04f 37ff 	mov.w	r7, #4294967295
 8001b28:	4638      	mov	r0, r7
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	6922      	ldr	r2, [r4, #16]
 8001b30:	1a98      	subs	r0, r3, r2
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	b2f6      	uxtb	r6, r6
 8001b36:	4283      	cmp	r3, r0
 8001b38:	4637      	mov	r7, r6
 8001b3a:	dc05      	bgt.n	8001b48 <__swbuf_r+0x4e>
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 fd32 	bl	80025a8 <_fflush_r>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d1ed      	bne.n	8001b24 <__swbuf_r+0x2a>
 8001b48:	68a3      	ldr	r3, [r4, #8]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60a3      	str	r3, [r4, #8]
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	6022      	str	r2, [r4, #0]
 8001b54:	701e      	strb	r6, [r3, #0]
 8001b56:	6962      	ldr	r2, [r4, #20]
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d004      	beq.n	8001b68 <__swbuf_r+0x6e>
 8001b5e:	89a3      	ldrh	r3, [r4, #12]
 8001b60:	07db      	lsls	r3, r3, #31
 8001b62:	d5e1      	bpl.n	8001b28 <__swbuf_r+0x2e>
 8001b64:	2e0a      	cmp	r6, #10
 8001b66:	d1df      	bne.n	8001b28 <__swbuf_r+0x2e>
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 fd1c 	bl	80025a8 <_fflush_r>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d0d9      	beq.n	8001b28 <__swbuf_r+0x2e>
 8001b74:	e7d6      	b.n	8001b24 <__swbuf_r+0x2a>
	...

08001b78 <__swsetup_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <__swsetup_r+0xa8>)
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	460c      	mov	r4, r1
 8001b82:	b118      	cbz	r0, 8001b8c <__swsetup_r+0x14>
 8001b84:	6a03      	ldr	r3, [r0, #32]
 8001b86:	b90b      	cbnz	r3, 8001b8c <__swsetup_r+0x14>
 8001b88:	f7ff fece 	bl	8001928 <__sinit>
 8001b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b90:	0719      	lsls	r1, r3, #28
 8001b92:	d422      	bmi.n	8001bda <__swsetup_r+0x62>
 8001b94:	06da      	lsls	r2, r3, #27
 8001b96:	d407      	bmi.n	8001ba8 <__swsetup_r+0x30>
 8001b98:	2209      	movs	r2, #9
 8001b9a:	602a      	str	r2, [r5, #0]
 8001b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	e033      	b.n	8001c10 <__swsetup_r+0x98>
 8001ba8:	0758      	lsls	r0, r3, #29
 8001baa:	d512      	bpl.n	8001bd2 <__swsetup_r+0x5a>
 8001bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bae:	b141      	cbz	r1, 8001bc2 <__swsetup_r+0x4a>
 8001bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bb4:	4299      	cmp	r1, r3
 8001bb6:	d002      	beq.n	8001bbe <__swsetup_r+0x46>
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f8a9 	bl	8001d10 <_free_r>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bc2:	89a3      	ldrh	r3, [r4, #12]
 8001bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001bc8:	81a3      	strh	r3, [r4, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6063      	str	r3, [r4, #4]
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	81a3      	strh	r3, [r4, #12]
 8001bda:	6923      	ldr	r3, [r4, #16]
 8001bdc:	b94b      	cbnz	r3, 8001bf2 <__swsetup_r+0x7a>
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be8:	d003      	beq.n	8001bf2 <__swsetup_r+0x7a>
 8001bea:	4621      	mov	r1, r4
 8001bec:	4628      	mov	r0, r5
 8001bee:	f000 fd29 	bl	8002644 <__smakebuf_r>
 8001bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bf6:	f013 0201 	ands.w	r2, r3, #1
 8001bfa:	d00a      	beq.n	8001c12 <__swsetup_r+0x9a>
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60a2      	str	r2, [r4, #8]
 8001c00:	6962      	ldr	r2, [r4, #20]
 8001c02:	4252      	negs	r2, r2
 8001c04:	61a2      	str	r2, [r4, #24]
 8001c06:	6922      	ldr	r2, [r4, #16]
 8001c08:	b942      	cbnz	r2, 8001c1c <__swsetup_r+0xa4>
 8001c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001c0e:	d1c5      	bne.n	8001b9c <__swsetup_r+0x24>
 8001c10:	bd38      	pop	{r3, r4, r5, pc}
 8001c12:	0799      	lsls	r1, r3, #30
 8001c14:	bf58      	it	pl
 8001c16:	6962      	ldrpl	r2, [r4, #20]
 8001c18:	60a2      	str	r2, [r4, #8]
 8001c1a:	e7f4      	b.n	8001c06 <__swsetup_r+0x8e>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e7f7      	b.n	8001c10 <__swsetup_r+0x98>
 8001c20:	20000020 	.word	0x20000020

08001c24 <memset>:
 8001c24:	4402      	add	r2, r0
 8001c26:	4603      	mov	r3, r0
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d100      	bne.n	8001c2e <memset+0xa>
 8001c2c:	4770      	bx	lr
 8001c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c32:	e7f9      	b.n	8001c28 <memset+0x4>

08001c34 <_close_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4d06      	ldr	r5, [pc, #24]	@ (8001c50 <_close_r+0x1c>)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	602b      	str	r3, [r5, #0]
 8001c40:	f000 fe40 	bl	80028c4 <_close>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	d102      	bne.n	8001c4e <_close_r+0x1a>
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	b103      	cbz	r3, 8001c4e <_close_r+0x1a>
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	20000214 	.word	0x20000214

08001c54 <_lseek_r>:
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4d07      	ldr	r5, [pc, #28]	@ (8001c74 <_lseek_r+0x20>)
 8001c58:	4604      	mov	r4, r0
 8001c5a:	4608      	mov	r0, r1
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	602a      	str	r2, [r5, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f000 fdef 	bl	8002846 <_lseek>
 8001c68:	1c43      	adds	r3, r0, #1
 8001c6a:	d102      	bne.n	8001c72 <_lseek_r+0x1e>
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	b103      	cbz	r3, 8001c72 <_lseek_r+0x1e>
 8001c70:	6023      	str	r3, [r4, #0]
 8001c72:	bd38      	pop	{r3, r4, r5, pc}
 8001c74:	20000214 	.word	0x20000214

08001c78 <_read_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4d07      	ldr	r5, [pc, #28]	@ (8001c98 <_read_r+0x20>)
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	4608      	mov	r0, r1
 8001c80:	4611      	mov	r1, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	602a      	str	r2, [r5, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f000 fd87 	bl	800279a <_read>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d102      	bne.n	8001c96 <_read_r+0x1e>
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	b103      	cbz	r3, 8001c96 <_read_r+0x1e>
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
 8001c98:	20000214 	.word	0x20000214

08001c9c <_write_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4d07      	ldr	r5, [pc, #28]	@ (8001cbc <_write_r+0x20>)
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	602a      	str	r2, [r5, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f000 fddd 	bl	800286a <_write>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d102      	bne.n	8001cba <_write_r+0x1e>
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	b103      	cbz	r3, 8001cba <_write_r+0x1e>
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	20000214 	.word	0x20000214

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8001cf8 <__libc_init_array+0x38>)
 8001cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8001cfc <__libc_init_array+0x3c>)
 8001cc6:	1b64      	subs	r4, r4, r5
 8001cc8:	10a4      	asrs	r4, r4, #2
 8001cca:	2600      	movs	r6, #0
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8001d00 <__libc_init_array+0x40>)
 8001cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8001d04 <__libc_init_array+0x44>)
 8001cd4:	f000 ffe4 	bl	8002ca0 <_init>
 8001cd8:	1b64      	subs	r4, r4, r5
 8001cda:	10a4      	asrs	r4, r4, #2
 8001cdc:	2600      	movs	r6, #0
 8001cde:	42a6      	cmp	r6, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce8:	4798      	blx	r3
 8001cea:	3601      	adds	r6, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf2:	4798      	blx	r3
 8001cf4:	3601      	adds	r6, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08002db8 	.word	0x08002db8
 8001cfc:	08002db8 	.word	0x08002db8
 8001d00:	08002db8 	.word	0x08002db8
 8001d04:	08002dbc 	.word	0x08002dbc

08001d08 <__retarget_lock_init_recursive>:
 8001d08:	4770      	bx	lr

08001d0a <__retarget_lock_acquire_recursive>:
 8001d0a:	4770      	bx	lr

08001d0c <__retarget_lock_release_recursive>:
 8001d0c:	4770      	bx	lr
	...

08001d10 <_free_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4605      	mov	r5, r0
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d041      	beq.n	8001d9c <_free_r+0x8c>
 8001d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d1c:	1f0c      	subs	r4, r1, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bfb8      	it	lt
 8001d22:	18e4      	addlt	r4, r4, r3
 8001d24:	f000 f8e0 	bl	8001ee8 <__malloc_lock>
 8001d28:	4a1d      	ldr	r2, [pc, #116]	@ (8001da0 <_free_r+0x90>)
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	b933      	cbnz	r3, 8001d3c <_free_r+0x2c>
 8001d2e:	6063      	str	r3, [r4, #4]
 8001d30:	6014      	str	r4, [r2, #0]
 8001d32:	4628      	mov	r0, r5
 8001d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d38:	f000 b8dc 	b.w	8001ef4 <__malloc_unlock>
 8001d3c:	42a3      	cmp	r3, r4
 8001d3e:	d908      	bls.n	8001d52 <_free_r+0x42>
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	1821      	adds	r1, r4, r0
 8001d44:	428b      	cmp	r3, r1
 8001d46:	bf01      	itttt	eq
 8001d48:	6819      	ldreq	r1, [r3, #0]
 8001d4a:	685b      	ldreq	r3, [r3, #4]
 8001d4c:	1809      	addeq	r1, r1, r0
 8001d4e:	6021      	streq	r1, [r4, #0]
 8001d50:	e7ed      	b.n	8001d2e <_free_r+0x1e>
 8001d52:	461a      	mov	r2, r3
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	b10b      	cbz	r3, 8001d5c <_free_r+0x4c>
 8001d58:	42a3      	cmp	r3, r4
 8001d5a:	d9fa      	bls.n	8001d52 <_free_r+0x42>
 8001d5c:	6811      	ldr	r1, [r2, #0]
 8001d5e:	1850      	adds	r0, r2, r1
 8001d60:	42a0      	cmp	r0, r4
 8001d62:	d10b      	bne.n	8001d7c <_free_r+0x6c>
 8001d64:	6820      	ldr	r0, [r4, #0]
 8001d66:	4401      	add	r1, r0
 8001d68:	1850      	adds	r0, r2, r1
 8001d6a:	4283      	cmp	r3, r0
 8001d6c:	6011      	str	r1, [r2, #0]
 8001d6e:	d1e0      	bne.n	8001d32 <_free_r+0x22>
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	6053      	str	r3, [r2, #4]
 8001d76:	4408      	add	r0, r1
 8001d78:	6010      	str	r0, [r2, #0]
 8001d7a:	e7da      	b.n	8001d32 <_free_r+0x22>
 8001d7c:	d902      	bls.n	8001d84 <_free_r+0x74>
 8001d7e:	230c      	movs	r3, #12
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	e7d6      	b.n	8001d32 <_free_r+0x22>
 8001d84:	6820      	ldr	r0, [r4, #0]
 8001d86:	1821      	adds	r1, r4, r0
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	bf04      	itt	eq
 8001d8c:	6819      	ldreq	r1, [r3, #0]
 8001d8e:	685b      	ldreq	r3, [r3, #4]
 8001d90:	6063      	str	r3, [r4, #4]
 8001d92:	bf04      	itt	eq
 8001d94:	1809      	addeq	r1, r1, r0
 8001d96:	6021      	streq	r1, [r4, #0]
 8001d98:	6054      	str	r4, [r2, #4]
 8001d9a:	e7ca      	b.n	8001d32 <_free_r+0x22>
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000220 	.word	0x20000220

08001da4 <sbrk_aligned>:
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	4e0f      	ldr	r6, [pc, #60]	@ (8001de4 <sbrk_aligned+0x40>)
 8001da8:	460c      	mov	r4, r1
 8001daa:	6831      	ldr	r1, [r6, #0]
 8001dac:	4605      	mov	r5, r0
 8001dae:	b911      	cbnz	r1, 8001db6 <sbrk_aligned+0x12>
 8001db0:	f000 fca6 	bl	8002700 <_sbrk_r>
 8001db4:	6030      	str	r0, [r6, #0]
 8001db6:	4621      	mov	r1, r4
 8001db8:	4628      	mov	r0, r5
 8001dba:	f000 fca1 	bl	8002700 <_sbrk_r>
 8001dbe:	1c43      	adds	r3, r0, #1
 8001dc0:	d103      	bne.n	8001dca <sbrk_aligned+0x26>
 8001dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
 8001dca:	1cc4      	adds	r4, r0, #3
 8001dcc:	f024 0403 	bic.w	r4, r4, #3
 8001dd0:	42a0      	cmp	r0, r4
 8001dd2:	d0f8      	beq.n	8001dc6 <sbrk_aligned+0x22>
 8001dd4:	1a21      	subs	r1, r4, r0
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f000 fc92 	bl	8002700 <_sbrk_r>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d1f2      	bne.n	8001dc6 <sbrk_aligned+0x22>
 8001de0:	e7ef      	b.n	8001dc2 <sbrk_aligned+0x1e>
 8001de2:	bf00      	nop
 8001de4:	2000021c 	.word	0x2000021c

08001de8 <_malloc_r>:
 8001de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dec:	1ccd      	adds	r5, r1, #3
 8001dee:	f025 0503 	bic.w	r5, r5, #3
 8001df2:	3508      	adds	r5, #8
 8001df4:	2d0c      	cmp	r5, #12
 8001df6:	bf38      	it	cc
 8001df8:	250c      	movcc	r5, #12
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	4606      	mov	r6, r0
 8001dfe:	db01      	blt.n	8001e04 <_malloc_r+0x1c>
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d904      	bls.n	8001e0e <_malloc_r+0x26>
 8001e04:	230c      	movs	r3, #12
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ee4 <_malloc_r+0xfc>
 8001e12:	f000 f869 	bl	8001ee8 <__malloc_lock>
 8001e16:	f8d8 3000 	ldr.w	r3, [r8]
 8001e1a:	461c      	mov	r4, r3
 8001e1c:	bb44      	cbnz	r4, 8001e70 <_malloc_r+0x88>
 8001e1e:	4629      	mov	r1, r5
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7ff ffbf 	bl	8001da4 <sbrk_aligned>
 8001e26:	1c43      	adds	r3, r0, #1
 8001e28:	4604      	mov	r4, r0
 8001e2a:	d158      	bne.n	8001ede <_malloc_r+0xf6>
 8001e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8001e30:	4627      	mov	r7, r4
 8001e32:	2f00      	cmp	r7, #0
 8001e34:	d143      	bne.n	8001ebe <_malloc_r+0xd6>
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	d04b      	beq.n	8001ed2 <_malloc_r+0xea>
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	4630      	mov	r0, r6
 8001e40:	eb04 0903 	add.w	r9, r4, r3
 8001e44:	f000 fc5c 	bl	8002700 <_sbrk_r>
 8001e48:	4581      	cmp	r9, r0
 8001e4a:	d142      	bne.n	8001ed2 <_malloc_r+0xea>
 8001e4c:	6821      	ldr	r1, [r4, #0]
 8001e4e:	1a6d      	subs	r5, r5, r1
 8001e50:	4629      	mov	r1, r5
 8001e52:	4630      	mov	r0, r6
 8001e54:	f7ff ffa6 	bl	8001da4 <sbrk_aligned>
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d03a      	beq.n	8001ed2 <_malloc_r+0xea>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	442b      	add	r3, r5
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	f8d8 3000 	ldr.w	r3, [r8]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	bb62      	cbnz	r2, 8001ec4 <_malloc_r+0xdc>
 8001e6a:	f8c8 7000 	str.w	r7, [r8]
 8001e6e:	e00f      	b.n	8001e90 <_malloc_r+0xa8>
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	1b52      	subs	r2, r2, r5
 8001e74:	d420      	bmi.n	8001eb8 <_malloc_r+0xd0>
 8001e76:	2a0b      	cmp	r2, #11
 8001e78:	d917      	bls.n	8001eaa <_malloc_r+0xc2>
 8001e7a:	1961      	adds	r1, r4, r5
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	6025      	str	r5, [r4, #0]
 8001e80:	bf18      	it	ne
 8001e82:	6059      	strne	r1, [r3, #4]
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	bf08      	it	eq
 8001e88:	f8c8 1000 	streq.w	r1, [r8]
 8001e8c:	5162      	str	r2, [r4, r5]
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	4630      	mov	r0, r6
 8001e92:	f000 f82f 	bl	8001ef4 <__malloc_unlock>
 8001e96:	f104 000b 	add.w	r0, r4, #11
 8001e9a:	1d23      	adds	r3, r4, #4
 8001e9c:	f020 0007 	bic.w	r0, r0, #7
 8001ea0:	1ac2      	subs	r2, r0, r3
 8001ea2:	bf1c      	itt	ne
 8001ea4:	1a1b      	subne	r3, r3, r0
 8001ea6:	50a3      	strne	r3, [r4, r2]
 8001ea8:	e7af      	b.n	8001e0a <_malloc_r+0x22>
 8001eaa:	6862      	ldr	r2, [r4, #4]
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	bf0c      	ite	eq
 8001eb0:	f8c8 2000 	streq.w	r2, [r8]
 8001eb4:	605a      	strne	r2, [r3, #4]
 8001eb6:	e7eb      	b.n	8001e90 <_malloc_r+0xa8>
 8001eb8:	4623      	mov	r3, r4
 8001eba:	6864      	ldr	r4, [r4, #4]
 8001ebc:	e7ae      	b.n	8001e1c <_malloc_r+0x34>
 8001ebe:	463c      	mov	r4, r7
 8001ec0:	687f      	ldr	r7, [r7, #4]
 8001ec2:	e7b6      	b.n	8001e32 <_malloc_r+0x4a>
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	42a3      	cmp	r3, r4
 8001eca:	d1fb      	bne.n	8001ec4 <_malloc_r+0xdc>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6053      	str	r3, [r2, #4]
 8001ed0:	e7de      	b.n	8001e90 <_malloc_r+0xa8>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	6033      	str	r3, [r6, #0]
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f000 f80c 	bl	8001ef4 <__malloc_unlock>
 8001edc:	e794      	b.n	8001e08 <_malloc_r+0x20>
 8001ede:	6005      	str	r5, [r0, #0]
 8001ee0:	e7d6      	b.n	8001e90 <_malloc_r+0xa8>
 8001ee2:	bf00      	nop
 8001ee4:	20000220 	.word	0x20000220

08001ee8 <__malloc_lock>:
 8001ee8:	4801      	ldr	r0, [pc, #4]	@ (8001ef0 <__malloc_lock+0x8>)
 8001eea:	f7ff bf0e 	b.w	8001d0a <__retarget_lock_acquire_recursive>
 8001eee:	bf00      	nop
 8001ef0:	20000218 	.word	0x20000218

08001ef4 <__malloc_unlock>:
 8001ef4:	4801      	ldr	r0, [pc, #4]	@ (8001efc <__malloc_unlock+0x8>)
 8001ef6:	f7ff bf09 	b.w	8001d0c <__retarget_lock_release_recursive>
 8001efa:	bf00      	nop
 8001efc:	20000218 	.word	0x20000218

08001f00 <__sfputc_r>:
 8001f00:	6893      	ldr	r3, [r2, #8]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	b410      	push	{r4}
 8001f08:	6093      	str	r3, [r2, #8]
 8001f0a:	da08      	bge.n	8001f1e <__sfputc_r+0x1e>
 8001f0c:	6994      	ldr	r4, [r2, #24]
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	db01      	blt.n	8001f16 <__sfputc_r+0x16>
 8001f12:	290a      	cmp	r1, #10
 8001f14:	d103      	bne.n	8001f1e <__sfputc_r+0x1e>
 8001f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f1a:	f7ff bdee 	b.w	8001afa <__swbuf_r>
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	1c58      	adds	r0, r3, #1
 8001f22:	6010      	str	r0, [r2, #0]
 8001f24:	7019      	strb	r1, [r3, #0]
 8001f26:	4608      	mov	r0, r1
 8001f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <__sfputs_r>:
 8001f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f30:	4606      	mov	r6, r0
 8001f32:	460f      	mov	r7, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	18d5      	adds	r5, r2, r3
 8001f38:	42ac      	cmp	r4, r5
 8001f3a:	d101      	bne.n	8001f40 <__sfputs_r+0x12>
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e007      	b.n	8001f50 <__sfputs_r+0x22>
 8001f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f44:	463a      	mov	r2, r7
 8001f46:	4630      	mov	r0, r6
 8001f48:	f7ff ffda 	bl	8001f00 <__sfputc_r>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d1f3      	bne.n	8001f38 <__sfputs_r+0xa>
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f54 <_vfiprintf_r>:
 8001f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f58:	460d      	mov	r5, r1
 8001f5a:	b09d      	sub	sp, #116	@ 0x74
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	4606      	mov	r6, r0
 8001f62:	b118      	cbz	r0, 8001f6c <_vfiprintf_r+0x18>
 8001f64:	6a03      	ldr	r3, [r0, #32]
 8001f66:	b90b      	cbnz	r3, 8001f6c <_vfiprintf_r+0x18>
 8001f68:	f7ff fcde 	bl	8001928 <__sinit>
 8001f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f6e:	07d9      	lsls	r1, r3, #31
 8001f70:	d405      	bmi.n	8001f7e <_vfiprintf_r+0x2a>
 8001f72:	89ab      	ldrh	r3, [r5, #12]
 8001f74:	059a      	lsls	r2, r3, #22
 8001f76:	d402      	bmi.n	8001f7e <_vfiprintf_r+0x2a>
 8001f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f7a:	f7ff fec6 	bl	8001d0a <__retarget_lock_acquire_recursive>
 8001f7e:	89ab      	ldrh	r3, [r5, #12]
 8001f80:	071b      	lsls	r3, r3, #28
 8001f82:	d501      	bpl.n	8001f88 <_vfiprintf_r+0x34>
 8001f84:	692b      	ldr	r3, [r5, #16]
 8001f86:	b99b      	cbnz	r3, 8001fb0 <_vfiprintf_r+0x5c>
 8001f88:	4629      	mov	r1, r5
 8001f8a:	4630      	mov	r0, r6
 8001f8c:	f7ff fdf4 	bl	8001b78 <__swsetup_r>
 8001f90:	b170      	cbz	r0, 8001fb0 <_vfiprintf_r+0x5c>
 8001f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f94:	07dc      	lsls	r4, r3, #31
 8001f96:	d504      	bpl.n	8001fa2 <_vfiprintf_r+0x4e>
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	b01d      	add	sp, #116	@ 0x74
 8001f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fa2:	89ab      	ldrh	r3, [r5, #12]
 8001fa4:	0598      	lsls	r0, r3, #22
 8001fa6:	d4f7      	bmi.n	8001f98 <_vfiprintf_r+0x44>
 8001fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001faa:	f7ff feaf 	bl	8001d0c <__retarget_lock_release_recursive>
 8001fae:	e7f3      	b.n	8001f98 <_vfiprintf_r+0x44>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8001fbe:	2330      	movs	r3, #48	@ 0x30
 8001fc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002170 <_vfiprintf_r+0x21c>
 8001fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001fc8:	f04f 0901 	mov.w	r9, #1
 8001fcc:	4623      	mov	r3, r4
 8001fce:	469a      	mov	sl, r3
 8001fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fd4:	b10a      	cbz	r2, 8001fda <_vfiprintf_r+0x86>
 8001fd6:	2a25      	cmp	r2, #37	@ 0x25
 8001fd8:	d1f9      	bne.n	8001fce <_vfiprintf_r+0x7a>
 8001fda:	ebba 0b04 	subs.w	fp, sl, r4
 8001fde:	d00b      	beq.n	8001ff8 <_vfiprintf_r+0xa4>
 8001fe0:	465b      	mov	r3, fp
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f7ff ffa1 	bl	8001f2e <__sfputs_r>
 8001fec:	3001      	adds	r0, #1
 8001fee:	f000 80a7 	beq.w	8002140 <_vfiprintf_r+0x1ec>
 8001ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ff4:	445a      	add	r2, fp
 8001ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 809f 	beq.w	8002140 <_vfiprintf_r+0x1ec>
 8002002:	2300      	movs	r3, #0
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800200c:	f10a 0a01 	add.w	sl, sl, #1
 8002010:	9304      	str	r3, [sp, #16]
 8002012:	9307      	str	r3, [sp, #28]
 8002014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002018:	931a      	str	r3, [sp, #104]	@ 0x68
 800201a:	4654      	mov	r4, sl
 800201c:	2205      	movs	r2, #5
 800201e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002022:	4853      	ldr	r0, [pc, #332]	@ (8002170 <_vfiprintf_r+0x21c>)
 8002024:	f7fe f8d4 	bl	80001d0 <memchr>
 8002028:	9a04      	ldr	r2, [sp, #16]
 800202a:	b9d8      	cbnz	r0, 8002064 <_vfiprintf_r+0x110>
 800202c:	06d1      	lsls	r1, r2, #27
 800202e:	bf44      	itt	mi
 8002030:	2320      	movmi	r3, #32
 8002032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002036:	0713      	lsls	r3, r2, #28
 8002038:	bf44      	itt	mi
 800203a:	232b      	movmi	r3, #43	@ 0x2b
 800203c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002040:	f89a 3000 	ldrb.w	r3, [sl]
 8002044:	2b2a      	cmp	r3, #42	@ 0x2a
 8002046:	d015      	beq.n	8002074 <_vfiprintf_r+0x120>
 8002048:	9a07      	ldr	r2, [sp, #28]
 800204a:	4654      	mov	r4, sl
 800204c:	2000      	movs	r0, #0
 800204e:	f04f 0c0a 	mov.w	ip, #10
 8002052:	4621      	mov	r1, r4
 8002054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002058:	3b30      	subs	r3, #48	@ 0x30
 800205a:	2b09      	cmp	r3, #9
 800205c:	d94b      	bls.n	80020f6 <_vfiprintf_r+0x1a2>
 800205e:	b1b0      	cbz	r0, 800208e <_vfiprintf_r+0x13a>
 8002060:	9207      	str	r2, [sp, #28]
 8002062:	e014      	b.n	800208e <_vfiprintf_r+0x13a>
 8002064:	eba0 0308 	sub.w	r3, r0, r8
 8002068:	fa09 f303 	lsl.w	r3, r9, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	9304      	str	r3, [sp, #16]
 8002070:	46a2      	mov	sl, r4
 8002072:	e7d2      	b.n	800201a <_vfiprintf_r+0xc6>
 8002074:	9b03      	ldr	r3, [sp, #12]
 8002076:	1d19      	adds	r1, r3, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	9103      	str	r1, [sp, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	bfbb      	ittet	lt
 8002080:	425b      	neglt	r3, r3
 8002082:	f042 0202 	orrlt.w	r2, r2, #2
 8002086:	9307      	strge	r3, [sp, #28]
 8002088:	9307      	strlt	r3, [sp, #28]
 800208a:	bfb8      	it	lt
 800208c:	9204      	strlt	r2, [sp, #16]
 800208e:	7823      	ldrb	r3, [r4, #0]
 8002090:	2b2e      	cmp	r3, #46	@ 0x2e
 8002092:	d10a      	bne.n	80020aa <_vfiprintf_r+0x156>
 8002094:	7863      	ldrb	r3, [r4, #1]
 8002096:	2b2a      	cmp	r3, #42	@ 0x2a
 8002098:	d132      	bne.n	8002100 <_vfiprintf_r+0x1ac>
 800209a:	9b03      	ldr	r3, [sp, #12]
 800209c:	1d1a      	adds	r2, r3, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	9203      	str	r2, [sp, #12]
 80020a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80020a6:	3402      	adds	r4, #2
 80020a8:	9305      	str	r3, [sp, #20]
 80020aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002180 <_vfiprintf_r+0x22c>
 80020ae:	7821      	ldrb	r1, [r4, #0]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4650      	mov	r0, sl
 80020b4:	f7fe f88c 	bl	80001d0 <memchr>
 80020b8:	b138      	cbz	r0, 80020ca <_vfiprintf_r+0x176>
 80020ba:	9b04      	ldr	r3, [sp, #16]
 80020bc:	eba0 000a 	sub.w	r0, r0, sl
 80020c0:	2240      	movs	r2, #64	@ 0x40
 80020c2:	4082      	lsls	r2, r0
 80020c4:	4313      	orrs	r3, r2
 80020c6:	3401      	adds	r4, #1
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ce:	4829      	ldr	r0, [pc, #164]	@ (8002174 <_vfiprintf_r+0x220>)
 80020d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80020d4:	2206      	movs	r2, #6
 80020d6:	f7fe f87b 	bl	80001d0 <memchr>
 80020da:	2800      	cmp	r0, #0
 80020dc:	d03f      	beq.n	800215e <_vfiprintf_r+0x20a>
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <_vfiprintf_r+0x224>)
 80020e0:	bb1b      	cbnz	r3, 800212a <_vfiprintf_r+0x1d6>
 80020e2:	9b03      	ldr	r3, [sp, #12]
 80020e4:	3307      	adds	r3, #7
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	3308      	adds	r3, #8
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80020f0:	443b      	add	r3, r7
 80020f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80020f4:	e76a      	b.n	8001fcc <_vfiprintf_r+0x78>
 80020f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80020fa:	460c      	mov	r4, r1
 80020fc:	2001      	movs	r0, #1
 80020fe:	e7a8      	b.n	8002052 <_vfiprintf_r+0xfe>
 8002100:	2300      	movs	r3, #0
 8002102:	3401      	adds	r4, #1
 8002104:	9305      	str	r3, [sp, #20]
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 0c0a 	mov.w	ip, #10
 800210c:	4620      	mov	r0, r4
 800210e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002112:	3a30      	subs	r2, #48	@ 0x30
 8002114:	2a09      	cmp	r2, #9
 8002116:	d903      	bls.n	8002120 <_vfiprintf_r+0x1cc>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0c6      	beq.n	80020aa <_vfiprintf_r+0x156>
 800211c:	9105      	str	r1, [sp, #20]
 800211e:	e7c4      	b.n	80020aa <_vfiprintf_r+0x156>
 8002120:	fb0c 2101 	mla	r1, ip, r1, r2
 8002124:	4604      	mov	r4, r0
 8002126:	2301      	movs	r3, #1
 8002128:	e7f0      	b.n	800210c <_vfiprintf_r+0x1b8>
 800212a:	ab03      	add	r3, sp, #12
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	462a      	mov	r2, r5
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <_vfiprintf_r+0x228>)
 8002132:	a904      	add	r1, sp, #16
 8002134:	4630      	mov	r0, r6
 8002136:	f3af 8000 	nop.w
 800213a:	4607      	mov	r7, r0
 800213c:	1c78      	adds	r0, r7, #1
 800213e:	d1d6      	bne.n	80020ee <_vfiprintf_r+0x19a>
 8002140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002142:	07d9      	lsls	r1, r3, #31
 8002144:	d405      	bmi.n	8002152 <_vfiprintf_r+0x1fe>
 8002146:	89ab      	ldrh	r3, [r5, #12]
 8002148:	059a      	lsls	r2, r3, #22
 800214a:	d402      	bmi.n	8002152 <_vfiprintf_r+0x1fe>
 800214c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800214e:	f7ff fddd 	bl	8001d0c <__retarget_lock_release_recursive>
 8002152:	89ab      	ldrh	r3, [r5, #12]
 8002154:	065b      	lsls	r3, r3, #25
 8002156:	f53f af1f 	bmi.w	8001f98 <_vfiprintf_r+0x44>
 800215a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800215c:	e71e      	b.n	8001f9c <_vfiprintf_r+0x48>
 800215e:	ab03      	add	r3, sp, #12
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	462a      	mov	r2, r5
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <_vfiprintf_r+0x228>)
 8002166:	a904      	add	r1, sp, #16
 8002168:	4630      	mov	r0, r6
 800216a:	f000 f879 	bl	8002260 <_printf_i>
 800216e:	e7e4      	b.n	800213a <_vfiprintf_r+0x1e6>
 8002170:	08002d62 	.word	0x08002d62
 8002174:	08002d6c 	.word	0x08002d6c
 8002178:	00000000 	.word	0x00000000
 800217c:	08001f2f 	.word	0x08001f2f
 8002180:	08002d68 	.word	0x08002d68

08002184 <_printf_common>:
 8002184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002188:	4616      	mov	r6, r2
 800218a:	4698      	mov	r8, r3
 800218c:	688a      	ldr	r2, [r1, #8]
 800218e:	690b      	ldr	r3, [r1, #16]
 8002190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002194:	4293      	cmp	r3, r2
 8002196:	bfb8      	it	lt
 8002198:	4613      	movlt	r3, r2
 800219a:	6033      	str	r3, [r6, #0]
 800219c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021a0:	4607      	mov	r7, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	b10a      	cbz	r2, 80021aa <_printf_common+0x26>
 80021a6:	3301      	adds	r3, #1
 80021a8:	6033      	str	r3, [r6, #0]
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	0699      	lsls	r1, r3, #26
 80021ae:	bf42      	ittt	mi
 80021b0:	6833      	ldrmi	r3, [r6, #0]
 80021b2:	3302      	addmi	r3, #2
 80021b4:	6033      	strmi	r3, [r6, #0]
 80021b6:	6825      	ldr	r5, [r4, #0]
 80021b8:	f015 0506 	ands.w	r5, r5, #6
 80021bc:	d106      	bne.n	80021cc <_printf_common+0x48>
 80021be:	f104 0a19 	add.w	sl, r4, #25
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	6832      	ldr	r2, [r6, #0]
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	42ab      	cmp	r3, r5
 80021ca:	dc26      	bgt.n	800221a <_printf_common+0x96>
 80021cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	3b00      	subs	r3, #0
 80021d4:	bf18      	it	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	0692      	lsls	r2, r2, #26
 80021da:	d42b      	bmi.n	8002234 <_printf_common+0xb0>
 80021dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80021e0:	4641      	mov	r1, r8
 80021e2:	4638      	mov	r0, r7
 80021e4:	47c8      	blx	r9
 80021e6:	3001      	adds	r0, #1
 80021e8:	d01e      	beq.n	8002228 <_printf_common+0xa4>
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	6922      	ldr	r2, [r4, #16]
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf02      	ittt	eq
 80021f6:	68e5      	ldreq	r5, [r4, #12]
 80021f8:	6833      	ldreq	r3, [r6, #0]
 80021fa:	1aed      	subeq	r5, r5, r3
 80021fc:	68a3      	ldr	r3, [r4, #8]
 80021fe:	bf0c      	ite	eq
 8002200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002204:	2500      	movne	r5, #0
 8002206:	4293      	cmp	r3, r2
 8002208:	bfc4      	itt	gt
 800220a:	1a9b      	subgt	r3, r3, r2
 800220c:	18ed      	addgt	r5, r5, r3
 800220e:	2600      	movs	r6, #0
 8002210:	341a      	adds	r4, #26
 8002212:	42b5      	cmp	r5, r6
 8002214:	d11a      	bne.n	800224c <_printf_common+0xc8>
 8002216:	2000      	movs	r0, #0
 8002218:	e008      	b.n	800222c <_printf_common+0xa8>
 800221a:	2301      	movs	r3, #1
 800221c:	4652      	mov	r2, sl
 800221e:	4641      	mov	r1, r8
 8002220:	4638      	mov	r0, r7
 8002222:	47c8      	blx	r9
 8002224:	3001      	adds	r0, #1
 8002226:	d103      	bne.n	8002230 <_printf_common+0xac>
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002230:	3501      	adds	r5, #1
 8002232:	e7c6      	b.n	80021c2 <_printf_common+0x3e>
 8002234:	18e1      	adds	r1, r4, r3
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	2030      	movs	r0, #48	@ 0x30
 800223a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800223e:	4422      	add	r2, r4
 8002240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002248:	3302      	adds	r3, #2
 800224a:	e7c7      	b.n	80021dc <_printf_common+0x58>
 800224c:	2301      	movs	r3, #1
 800224e:	4622      	mov	r2, r4
 8002250:	4641      	mov	r1, r8
 8002252:	4638      	mov	r0, r7
 8002254:	47c8      	blx	r9
 8002256:	3001      	adds	r0, #1
 8002258:	d0e6      	beq.n	8002228 <_printf_common+0xa4>
 800225a:	3601      	adds	r6, #1
 800225c:	e7d9      	b.n	8002212 <_printf_common+0x8e>
	...

08002260 <_printf_i>:
 8002260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	7e0f      	ldrb	r7, [r1, #24]
 8002266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002268:	2f78      	cmp	r7, #120	@ 0x78
 800226a:	4691      	mov	r9, r2
 800226c:	4680      	mov	r8, r0
 800226e:	460c      	mov	r4, r1
 8002270:	469a      	mov	sl, r3
 8002272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002276:	d807      	bhi.n	8002288 <_printf_i+0x28>
 8002278:	2f62      	cmp	r7, #98	@ 0x62
 800227a:	d80a      	bhi.n	8002292 <_printf_i+0x32>
 800227c:	2f00      	cmp	r7, #0
 800227e:	f000 80d2 	beq.w	8002426 <_printf_i+0x1c6>
 8002282:	2f58      	cmp	r7, #88	@ 0x58
 8002284:	f000 80b9 	beq.w	80023fa <_printf_i+0x19a>
 8002288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800228c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002290:	e03a      	b.n	8002308 <_printf_i+0xa8>
 8002292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002296:	2b15      	cmp	r3, #21
 8002298:	d8f6      	bhi.n	8002288 <_printf_i+0x28>
 800229a:	a101      	add	r1, pc, #4	@ (adr r1, 80022a0 <_printf_i+0x40>)
 800229c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022a0:	080022f9 	.word	0x080022f9
 80022a4:	0800230d 	.word	0x0800230d
 80022a8:	08002289 	.word	0x08002289
 80022ac:	08002289 	.word	0x08002289
 80022b0:	08002289 	.word	0x08002289
 80022b4:	08002289 	.word	0x08002289
 80022b8:	0800230d 	.word	0x0800230d
 80022bc:	08002289 	.word	0x08002289
 80022c0:	08002289 	.word	0x08002289
 80022c4:	08002289 	.word	0x08002289
 80022c8:	08002289 	.word	0x08002289
 80022cc:	0800240d 	.word	0x0800240d
 80022d0:	08002337 	.word	0x08002337
 80022d4:	080023c7 	.word	0x080023c7
 80022d8:	08002289 	.word	0x08002289
 80022dc:	08002289 	.word	0x08002289
 80022e0:	0800242f 	.word	0x0800242f
 80022e4:	08002289 	.word	0x08002289
 80022e8:	08002337 	.word	0x08002337
 80022ec:	08002289 	.word	0x08002289
 80022f0:	08002289 	.word	0x08002289
 80022f4:	080023cf 	.word	0x080023cf
 80022f8:	6833      	ldr	r3, [r6, #0]
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6032      	str	r2, [r6, #0]
 8002300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002308:	2301      	movs	r3, #1
 800230a:	e09d      	b.n	8002448 <_printf_i+0x1e8>
 800230c:	6833      	ldr	r3, [r6, #0]
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	1d19      	adds	r1, r3, #4
 8002312:	6031      	str	r1, [r6, #0]
 8002314:	0606      	lsls	r6, r0, #24
 8002316:	d501      	bpl.n	800231c <_printf_i+0xbc>
 8002318:	681d      	ldr	r5, [r3, #0]
 800231a:	e003      	b.n	8002324 <_printf_i+0xc4>
 800231c:	0645      	lsls	r5, r0, #25
 800231e:	d5fb      	bpl.n	8002318 <_printf_i+0xb8>
 8002320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002324:	2d00      	cmp	r5, #0
 8002326:	da03      	bge.n	8002330 <_printf_i+0xd0>
 8002328:	232d      	movs	r3, #45	@ 0x2d
 800232a:	426d      	negs	r5, r5
 800232c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002330:	4859      	ldr	r0, [pc, #356]	@ (8002498 <_printf_i+0x238>)
 8002332:	230a      	movs	r3, #10
 8002334:	e011      	b.n	800235a <_printf_i+0xfa>
 8002336:	6821      	ldr	r1, [r4, #0]
 8002338:	6833      	ldr	r3, [r6, #0]
 800233a:	0608      	lsls	r0, r1, #24
 800233c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002340:	d402      	bmi.n	8002348 <_printf_i+0xe8>
 8002342:	0649      	lsls	r1, r1, #25
 8002344:	bf48      	it	mi
 8002346:	b2ad      	uxthmi	r5, r5
 8002348:	2f6f      	cmp	r7, #111	@ 0x6f
 800234a:	4853      	ldr	r0, [pc, #332]	@ (8002498 <_printf_i+0x238>)
 800234c:	6033      	str	r3, [r6, #0]
 800234e:	bf14      	ite	ne
 8002350:	230a      	movne	r3, #10
 8002352:	2308      	moveq	r3, #8
 8002354:	2100      	movs	r1, #0
 8002356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800235a:	6866      	ldr	r6, [r4, #4]
 800235c:	60a6      	str	r6, [r4, #8]
 800235e:	2e00      	cmp	r6, #0
 8002360:	bfa2      	ittt	ge
 8002362:	6821      	ldrge	r1, [r4, #0]
 8002364:	f021 0104 	bicge.w	r1, r1, #4
 8002368:	6021      	strge	r1, [r4, #0]
 800236a:	b90d      	cbnz	r5, 8002370 <_printf_i+0x110>
 800236c:	2e00      	cmp	r6, #0
 800236e:	d04b      	beq.n	8002408 <_printf_i+0x1a8>
 8002370:	4616      	mov	r6, r2
 8002372:	fbb5 f1f3 	udiv	r1, r5, r3
 8002376:	fb03 5711 	mls	r7, r3, r1, r5
 800237a:	5dc7      	ldrb	r7, [r0, r7]
 800237c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002380:	462f      	mov	r7, r5
 8002382:	42bb      	cmp	r3, r7
 8002384:	460d      	mov	r5, r1
 8002386:	d9f4      	bls.n	8002372 <_printf_i+0x112>
 8002388:	2b08      	cmp	r3, #8
 800238a:	d10b      	bne.n	80023a4 <_printf_i+0x144>
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	07df      	lsls	r7, r3, #31
 8002390:	d508      	bpl.n	80023a4 <_printf_i+0x144>
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	6861      	ldr	r1, [r4, #4]
 8002396:	4299      	cmp	r1, r3
 8002398:	bfde      	ittt	le
 800239a:	2330      	movle	r3, #48	@ 0x30
 800239c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023a4:	1b92      	subs	r2, r2, r6
 80023a6:	6122      	str	r2, [r4, #16]
 80023a8:	f8cd a000 	str.w	sl, [sp]
 80023ac:	464b      	mov	r3, r9
 80023ae:	aa03      	add	r2, sp, #12
 80023b0:	4621      	mov	r1, r4
 80023b2:	4640      	mov	r0, r8
 80023b4:	f7ff fee6 	bl	8002184 <_printf_common>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d14a      	bne.n	8002452 <_printf_i+0x1f2>
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	b004      	add	sp, #16
 80023c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f043 0320 	orr.w	r3, r3, #32
 80023cc:	6023      	str	r3, [r4, #0]
 80023ce:	4833      	ldr	r0, [pc, #204]	@ (800249c <_printf_i+0x23c>)
 80023d0:	2778      	movs	r7, #120	@ 0x78
 80023d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	6831      	ldr	r1, [r6, #0]
 80023da:	061f      	lsls	r7, r3, #24
 80023dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80023e0:	d402      	bmi.n	80023e8 <_printf_i+0x188>
 80023e2:	065f      	lsls	r7, r3, #25
 80023e4:	bf48      	it	mi
 80023e6:	b2ad      	uxthmi	r5, r5
 80023e8:	6031      	str	r1, [r6, #0]
 80023ea:	07d9      	lsls	r1, r3, #31
 80023ec:	bf44      	itt	mi
 80023ee:	f043 0320 	orrmi.w	r3, r3, #32
 80023f2:	6023      	strmi	r3, [r4, #0]
 80023f4:	b11d      	cbz	r5, 80023fe <_printf_i+0x19e>
 80023f6:	2310      	movs	r3, #16
 80023f8:	e7ac      	b.n	8002354 <_printf_i+0xf4>
 80023fa:	4827      	ldr	r0, [pc, #156]	@ (8002498 <_printf_i+0x238>)
 80023fc:	e7e9      	b.n	80023d2 <_printf_i+0x172>
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f023 0320 	bic.w	r3, r3, #32
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	e7f6      	b.n	80023f6 <_printf_i+0x196>
 8002408:	4616      	mov	r6, r2
 800240a:	e7bd      	b.n	8002388 <_printf_i+0x128>
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	6825      	ldr	r5, [r4, #0]
 8002410:	6961      	ldr	r1, [r4, #20]
 8002412:	1d18      	adds	r0, r3, #4
 8002414:	6030      	str	r0, [r6, #0]
 8002416:	062e      	lsls	r6, r5, #24
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	d501      	bpl.n	8002420 <_printf_i+0x1c0>
 800241c:	6019      	str	r1, [r3, #0]
 800241e:	e002      	b.n	8002426 <_printf_i+0x1c6>
 8002420:	0668      	lsls	r0, r5, #25
 8002422:	d5fb      	bpl.n	800241c <_printf_i+0x1bc>
 8002424:	8019      	strh	r1, [r3, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	6123      	str	r3, [r4, #16]
 800242a:	4616      	mov	r6, r2
 800242c:	e7bc      	b.n	80023a8 <_printf_i+0x148>
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	1d1a      	adds	r2, r3, #4
 8002432:	6032      	str	r2, [r6, #0]
 8002434:	681e      	ldr	r6, [r3, #0]
 8002436:	6862      	ldr	r2, [r4, #4]
 8002438:	2100      	movs	r1, #0
 800243a:	4630      	mov	r0, r6
 800243c:	f7fd fec8 	bl	80001d0 <memchr>
 8002440:	b108      	cbz	r0, 8002446 <_printf_i+0x1e6>
 8002442:	1b80      	subs	r0, r0, r6
 8002444:	6060      	str	r0, [r4, #4]
 8002446:	6863      	ldr	r3, [r4, #4]
 8002448:	6123      	str	r3, [r4, #16]
 800244a:	2300      	movs	r3, #0
 800244c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002450:	e7aa      	b.n	80023a8 <_printf_i+0x148>
 8002452:	6923      	ldr	r3, [r4, #16]
 8002454:	4632      	mov	r2, r6
 8002456:	4649      	mov	r1, r9
 8002458:	4640      	mov	r0, r8
 800245a:	47d0      	blx	sl
 800245c:	3001      	adds	r0, #1
 800245e:	d0ad      	beq.n	80023bc <_printf_i+0x15c>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	079b      	lsls	r3, r3, #30
 8002464:	d413      	bmi.n	800248e <_printf_i+0x22e>
 8002466:	68e0      	ldr	r0, [r4, #12]
 8002468:	9b03      	ldr	r3, [sp, #12]
 800246a:	4298      	cmp	r0, r3
 800246c:	bfb8      	it	lt
 800246e:	4618      	movlt	r0, r3
 8002470:	e7a6      	b.n	80023c0 <_printf_i+0x160>
 8002472:	2301      	movs	r3, #1
 8002474:	4632      	mov	r2, r6
 8002476:	4649      	mov	r1, r9
 8002478:	4640      	mov	r0, r8
 800247a:	47d0      	blx	sl
 800247c:	3001      	adds	r0, #1
 800247e:	d09d      	beq.n	80023bc <_printf_i+0x15c>
 8002480:	3501      	adds	r5, #1
 8002482:	68e3      	ldr	r3, [r4, #12]
 8002484:	9903      	ldr	r1, [sp, #12]
 8002486:	1a5b      	subs	r3, r3, r1
 8002488:	42ab      	cmp	r3, r5
 800248a:	dcf2      	bgt.n	8002472 <_printf_i+0x212>
 800248c:	e7eb      	b.n	8002466 <_printf_i+0x206>
 800248e:	2500      	movs	r5, #0
 8002490:	f104 0619 	add.w	r6, r4, #25
 8002494:	e7f5      	b.n	8002482 <_printf_i+0x222>
 8002496:	bf00      	nop
 8002498:	08002d73 	.word	0x08002d73
 800249c:	08002d84 	.word	0x08002d84

080024a0 <__sflush_r>:
 80024a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a8:	0716      	lsls	r6, r2, #28
 80024aa:	4605      	mov	r5, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	d454      	bmi.n	800255a <__sflush_r+0xba>
 80024b0:	684b      	ldr	r3, [r1, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	dc02      	bgt.n	80024bc <__sflush_r+0x1c>
 80024b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	dd48      	ble.n	800254e <__sflush_r+0xae>
 80024bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024be:	2e00      	cmp	r6, #0
 80024c0:	d045      	beq.n	800254e <__sflush_r+0xae>
 80024c2:	2300      	movs	r3, #0
 80024c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80024c8:	682f      	ldr	r7, [r5, #0]
 80024ca:	6a21      	ldr	r1, [r4, #32]
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	d030      	beq.n	8002532 <__sflush_r+0x92>
 80024d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80024d2:	89a3      	ldrh	r3, [r4, #12]
 80024d4:	0759      	lsls	r1, r3, #29
 80024d6:	d505      	bpl.n	80024e4 <__sflush_r+0x44>
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80024de:	b10b      	cbz	r3, 80024e4 <__sflush_r+0x44>
 80024e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024e8:	6a21      	ldr	r1, [r4, #32]
 80024ea:	4628      	mov	r0, r5
 80024ec:	47b0      	blx	r6
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	d106      	bne.n	8002502 <__sflush_r+0x62>
 80024f4:	6829      	ldr	r1, [r5, #0]
 80024f6:	291d      	cmp	r1, #29
 80024f8:	d82b      	bhi.n	8002552 <__sflush_r+0xb2>
 80024fa:	4a2a      	ldr	r2, [pc, #168]	@ (80025a4 <__sflush_r+0x104>)
 80024fc:	410a      	asrs	r2, r1
 80024fe:	07d6      	lsls	r6, r2, #31
 8002500:	d427      	bmi.n	8002552 <__sflush_r+0xb2>
 8002502:	2200      	movs	r2, #0
 8002504:	6062      	str	r2, [r4, #4]
 8002506:	04d9      	lsls	r1, r3, #19
 8002508:	6922      	ldr	r2, [r4, #16]
 800250a:	6022      	str	r2, [r4, #0]
 800250c:	d504      	bpl.n	8002518 <__sflush_r+0x78>
 800250e:	1c42      	adds	r2, r0, #1
 8002510:	d101      	bne.n	8002516 <__sflush_r+0x76>
 8002512:	682b      	ldr	r3, [r5, #0]
 8002514:	b903      	cbnz	r3, 8002518 <__sflush_r+0x78>
 8002516:	6560      	str	r0, [r4, #84]	@ 0x54
 8002518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800251a:	602f      	str	r7, [r5, #0]
 800251c:	b1b9      	cbz	r1, 800254e <__sflush_r+0xae>
 800251e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002522:	4299      	cmp	r1, r3
 8002524:	d002      	beq.n	800252c <__sflush_r+0x8c>
 8002526:	4628      	mov	r0, r5
 8002528:	f7ff fbf2 	bl	8001d10 <_free_r>
 800252c:	2300      	movs	r3, #0
 800252e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002530:	e00d      	b.n	800254e <__sflush_r+0xae>
 8002532:	2301      	movs	r3, #1
 8002534:	4628      	mov	r0, r5
 8002536:	47b0      	blx	r6
 8002538:	4602      	mov	r2, r0
 800253a:	1c50      	adds	r0, r2, #1
 800253c:	d1c9      	bne.n	80024d2 <__sflush_r+0x32>
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0c6      	beq.n	80024d2 <__sflush_r+0x32>
 8002544:	2b1d      	cmp	r3, #29
 8002546:	d001      	beq.n	800254c <__sflush_r+0xac>
 8002548:	2b16      	cmp	r3, #22
 800254a:	d11e      	bne.n	800258a <__sflush_r+0xea>
 800254c:	602f      	str	r7, [r5, #0]
 800254e:	2000      	movs	r0, #0
 8002550:	e022      	b.n	8002598 <__sflush_r+0xf8>
 8002552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002556:	b21b      	sxth	r3, r3
 8002558:	e01b      	b.n	8002592 <__sflush_r+0xf2>
 800255a:	690f      	ldr	r7, [r1, #16]
 800255c:	2f00      	cmp	r7, #0
 800255e:	d0f6      	beq.n	800254e <__sflush_r+0xae>
 8002560:	0793      	lsls	r3, r2, #30
 8002562:	680e      	ldr	r6, [r1, #0]
 8002564:	bf08      	it	eq
 8002566:	694b      	ldreq	r3, [r1, #20]
 8002568:	600f      	str	r7, [r1, #0]
 800256a:	bf18      	it	ne
 800256c:	2300      	movne	r3, #0
 800256e:	eba6 0807 	sub.w	r8, r6, r7
 8002572:	608b      	str	r3, [r1, #8]
 8002574:	f1b8 0f00 	cmp.w	r8, #0
 8002578:	dde9      	ble.n	800254e <__sflush_r+0xae>
 800257a:	6a21      	ldr	r1, [r4, #32]
 800257c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800257e:	4643      	mov	r3, r8
 8002580:	463a      	mov	r2, r7
 8002582:	4628      	mov	r0, r5
 8002584:	47b0      	blx	r6
 8002586:	2800      	cmp	r0, #0
 8002588:	dc08      	bgt.n	800259c <__sflush_r+0xfc>
 800258a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800258e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002592:	81a3      	strh	r3, [r4, #12]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800259c:	4407      	add	r7, r0
 800259e:	eba8 0800 	sub.w	r8, r8, r0
 80025a2:	e7e7      	b.n	8002574 <__sflush_r+0xd4>
 80025a4:	dfbffffe 	.word	0xdfbffffe

080025a8 <_fflush_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	690b      	ldr	r3, [r1, #16]
 80025ac:	4605      	mov	r5, r0
 80025ae:	460c      	mov	r4, r1
 80025b0:	b913      	cbnz	r3, 80025b8 <_fflush_r+0x10>
 80025b2:	2500      	movs	r5, #0
 80025b4:	4628      	mov	r0, r5
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	b118      	cbz	r0, 80025c2 <_fflush_r+0x1a>
 80025ba:	6a03      	ldr	r3, [r0, #32]
 80025bc:	b90b      	cbnz	r3, 80025c2 <_fflush_r+0x1a>
 80025be:	f7ff f9b3 	bl	8001928 <__sinit>
 80025c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f3      	beq.n	80025b2 <_fflush_r+0xa>
 80025ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80025cc:	07d0      	lsls	r0, r2, #31
 80025ce:	d404      	bmi.n	80025da <_fflush_r+0x32>
 80025d0:	0599      	lsls	r1, r3, #22
 80025d2:	d402      	bmi.n	80025da <_fflush_r+0x32>
 80025d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025d6:	f7ff fb98 	bl	8001d0a <__retarget_lock_acquire_recursive>
 80025da:	4628      	mov	r0, r5
 80025dc:	4621      	mov	r1, r4
 80025de:	f7ff ff5f 	bl	80024a0 <__sflush_r>
 80025e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025e4:	07da      	lsls	r2, r3, #31
 80025e6:	4605      	mov	r5, r0
 80025e8:	d4e4      	bmi.n	80025b4 <_fflush_r+0xc>
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	059b      	lsls	r3, r3, #22
 80025ee:	d4e1      	bmi.n	80025b4 <_fflush_r+0xc>
 80025f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025f2:	f7ff fb8b 	bl	8001d0c <__retarget_lock_release_recursive>
 80025f6:	e7dd      	b.n	80025b4 <_fflush_r+0xc>

080025f8 <__swhatbuf_r>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	460c      	mov	r4, r1
 80025fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002600:	2900      	cmp	r1, #0
 8002602:	b096      	sub	sp, #88	@ 0x58
 8002604:	4615      	mov	r5, r2
 8002606:	461e      	mov	r6, r3
 8002608:	da0d      	bge.n	8002626 <__swhatbuf_r+0x2e>
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	bf14      	ite	ne
 8002616:	2340      	movne	r3, #64	@ 0x40
 8002618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800261c:	2000      	movs	r0, #0
 800261e:	6031      	str	r1, [r6, #0]
 8002620:	602b      	str	r3, [r5, #0]
 8002622:	b016      	add	sp, #88	@ 0x58
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	466a      	mov	r2, sp
 8002628:	f000 f848 	bl	80026bc <_fstat_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	dbec      	blt.n	800260a <__swhatbuf_r+0x12>
 8002630:	9901      	ldr	r1, [sp, #4]
 8002632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800263a:	4259      	negs	r1, r3
 800263c:	4159      	adcs	r1, r3
 800263e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002642:	e7eb      	b.n	800261c <__swhatbuf_r+0x24>

08002644 <__smakebuf_r>:
 8002644:	898b      	ldrh	r3, [r1, #12]
 8002646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002648:	079d      	lsls	r5, r3, #30
 800264a:	4606      	mov	r6, r0
 800264c:	460c      	mov	r4, r1
 800264e:	d507      	bpl.n	8002660 <__smakebuf_r+0x1c>
 8002650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002654:	6023      	str	r3, [r4, #0]
 8002656:	6123      	str	r3, [r4, #16]
 8002658:	2301      	movs	r3, #1
 800265a:	6163      	str	r3, [r4, #20]
 800265c:	b003      	add	sp, #12
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002660:	ab01      	add	r3, sp, #4
 8002662:	466a      	mov	r2, sp
 8002664:	f7ff ffc8 	bl	80025f8 <__swhatbuf_r>
 8002668:	9f00      	ldr	r7, [sp, #0]
 800266a:	4605      	mov	r5, r0
 800266c:	4639      	mov	r1, r7
 800266e:	4630      	mov	r0, r6
 8002670:	f7ff fbba 	bl	8001de8 <_malloc_r>
 8002674:	b948      	cbnz	r0, 800268a <__smakebuf_r+0x46>
 8002676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267a:	059a      	lsls	r2, r3, #22
 800267c:	d4ee      	bmi.n	800265c <__smakebuf_r+0x18>
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	81a3      	strh	r3, [r4, #12]
 8002688:	e7e2      	b.n	8002650 <__smakebuf_r+0xc>
 800268a:	89a3      	ldrh	r3, [r4, #12]
 800268c:	6020      	str	r0, [r4, #0]
 800268e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002692:	81a3      	strh	r3, [r4, #12]
 8002694:	9b01      	ldr	r3, [sp, #4]
 8002696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800269a:	b15b      	cbz	r3, 80026b4 <__smakebuf_r+0x70>
 800269c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f81d 	bl	80026e0 <_isatty_r>
 80026a6:	b128      	cbz	r0, 80026b4 <__smakebuf_r+0x70>
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	431d      	orrs	r5, r3
 80026b8:	81a5      	strh	r5, [r4, #12]
 80026ba:	e7cf      	b.n	800265c <__smakebuf_r+0x18>

080026bc <_fstat_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	4d07      	ldr	r5, [pc, #28]	@ (80026dc <_fstat_r+0x20>)
 80026c0:	2300      	movs	r3, #0
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	602b      	str	r3, [r5, #0]
 80026ca:	f000 f962 	bl	8002992 <_fstat>
 80026ce:	1c43      	adds	r3, r0, #1
 80026d0:	d102      	bne.n	80026d8 <_fstat_r+0x1c>
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	b103      	cbz	r3, 80026d8 <_fstat_r+0x1c>
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	bd38      	pop	{r3, r4, r5, pc}
 80026da:	bf00      	nop
 80026dc:	20000214 	.word	0x20000214

080026e0 <_isatty_r>:
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4d06      	ldr	r5, [pc, #24]	@ (80026fc <_isatty_r+0x1c>)
 80026e4:	2300      	movs	r3, #0
 80026e6:	4604      	mov	r4, r0
 80026e8:	4608      	mov	r0, r1
 80026ea:	602b      	str	r3, [r5, #0]
 80026ec:	f000 fab4 	bl	8002c58 <_isatty>
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	d102      	bne.n	80026fa <_isatty_r+0x1a>
 80026f4:	682b      	ldr	r3, [r5, #0]
 80026f6:	b103      	cbz	r3, 80026fa <_isatty_r+0x1a>
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	bd38      	pop	{r3, r4, r5, pc}
 80026fc:	20000214 	.word	0x20000214

08002700 <_sbrk_r>:
 8002700:	b538      	push	{r3, r4, r5, lr}
 8002702:	4d06      	ldr	r5, [pc, #24]	@ (800271c <_sbrk_r+0x1c>)
 8002704:	2300      	movs	r3, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	602b      	str	r3, [r5, #0]
 800270c:	f000 f8fc 	bl	8002908 <_sbrk>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_sbrk_r+0x1a>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_sbrk_r+0x1a>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000214 	.word	0x20000214

08002720 <findslot>:
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <findslot+0x2c>)
 8002722:	b510      	push	{r4, lr}
 8002724:	4604      	mov	r4, r0
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	b118      	cbz	r0, 8002732 <findslot+0x12>
 800272a:	6a03      	ldr	r3, [r0, #32]
 800272c:	b90b      	cbnz	r3, 8002732 <findslot+0x12>
 800272e:	f7ff f8fb 	bl	8001928 <__sinit>
 8002732:	2c13      	cmp	r4, #19
 8002734:	d807      	bhi.n	8002746 <findslot+0x26>
 8002736:	4806      	ldr	r0, [pc, #24]	@ (8002750 <findslot+0x30>)
 8002738:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800273c:	3201      	adds	r2, #1
 800273e:	d002      	beq.n	8002746 <findslot+0x26>
 8002740:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002744:	bd10      	pop	{r4, pc}
 8002746:	2000      	movs	r0, #0
 8002748:	e7fc      	b.n	8002744 <findslot+0x24>
 800274a:	bf00      	nop
 800274c:	20000020 	.word	0x20000020
 8002750:	20000234 	.word	0x20000234

08002754 <error>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	f000 fa9c 	bl	8002c94 <__errno>
 800275c:	2613      	movs	r6, #19
 800275e:	4605      	mov	r5, r0
 8002760:	2700      	movs	r7, #0
 8002762:	4630      	mov	r0, r6
 8002764:	4639      	mov	r1, r7
 8002766:	beab      	bkpt	0x00ab
 8002768:	4606      	mov	r6, r0
 800276a:	602e      	str	r6, [r5, #0]
 800276c:	4620      	mov	r0, r4
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002770 <checkerror>:
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d101      	bne.n	8002778 <checkerror+0x8>
 8002774:	f7ff bfee 	b.w	8002754 <error>
 8002778:	4770      	bx	lr

0800277a <_swiread>:
 800277a:	b530      	push	{r4, r5, lr}
 800277c:	b085      	sub	sp, #20
 800277e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002782:	9203      	str	r2, [sp, #12]
 8002784:	2406      	movs	r4, #6
 8002786:	ad01      	add	r5, sp, #4
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	beab      	bkpt	0x00ab
 800278e:	4604      	mov	r4, r0
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ffed 	bl	8002770 <checkerror>
 8002796:	b005      	add	sp, #20
 8002798:	bd30      	pop	{r4, r5, pc}

0800279a <_read>:
 800279a:	b570      	push	{r4, r5, r6, lr}
 800279c:	460e      	mov	r6, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	f7ff ffbe 	bl	8002720 <findslot>
 80027a4:	4605      	mov	r5, r0
 80027a6:	b930      	cbnz	r0, 80027b6 <_read+0x1c>
 80027a8:	f000 fa74 	bl	8002c94 <__errno>
 80027ac:	2309      	movs	r3, #9
 80027ae:	6003      	str	r3, [r0, #0]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	6800      	ldr	r0, [r0, #0]
 80027b8:	4622      	mov	r2, r4
 80027ba:	4631      	mov	r1, r6
 80027bc:	f7ff ffdd 	bl	800277a <_swiread>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d0f5      	beq.n	80027b0 <_read+0x16>
 80027c4:	686b      	ldr	r3, [r5, #4]
 80027c6:	1a20      	subs	r0, r4, r0
 80027c8:	4403      	add	r3, r0
 80027ca:	606b      	str	r3, [r5, #4]
 80027cc:	e7f2      	b.n	80027b4 <_read+0x1a>

080027ce <_swilseek>:
 80027ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027d0:	460c      	mov	r4, r1
 80027d2:	4616      	mov	r6, r2
 80027d4:	f7ff ffa4 	bl	8002720 <findslot>
 80027d8:	4605      	mov	r5, r0
 80027da:	b940      	cbnz	r0, 80027ee <_swilseek+0x20>
 80027dc:	f000 fa5a 	bl	8002c94 <__errno>
 80027e0:	2309      	movs	r3, #9
 80027e2:	6003      	str	r3, [r0, #0]
 80027e4:	f04f 34ff 	mov.w	r4, #4294967295
 80027e8:	4620      	mov	r0, r4
 80027ea:	b003      	add	sp, #12
 80027ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ee:	2e02      	cmp	r6, #2
 80027f0:	d903      	bls.n	80027fa <_swilseek+0x2c>
 80027f2:	f000 fa4f 	bl	8002c94 <__errno>
 80027f6:	2316      	movs	r3, #22
 80027f8:	e7f3      	b.n	80027e2 <_swilseek+0x14>
 80027fa:	2e01      	cmp	r6, #1
 80027fc:	d112      	bne.n	8002824 <_swilseek+0x56>
 80027fe:	6843      	ldr	r3, [r0, #4]
 8002800:	18e4      	adds	r4, r4, r3
 8002802:	d4f6      	bmi.n	80027f2 <_swilseek+0x24>
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	260a      	movs	r6, #10
 8002808:	e9cd 3400 	strd	r3, r4, [sp]
 800280c:	466f      	mov	r7, sp
 800280e:	4630      	mov	r0, r6
 8002810:	4639      	mov	r1, r7
 8002812:	beab      	bkpt	0x00ab
 8002814:	4606      	mov	r6, r0
 8002816:	4630      	mov	r0, r6
 8002818:	f7ff ffaa 	bl	8002770 <checkerror>
 800281c:	2800      	cmp	r0, #0
 800281e:	dbe1      	blt.n	80027e4 <_swilseek+0x16>
 8002820:	606c      	str	r4, [r5, #4]
 8002822:	e7e1      	b.n	80027e8 <_swilseek+0x1a>
 8002824:	2e02      	cmp	r6, #2
 8002826:	6803      	ldr	r3, [r0, #0]
 8002828:	d1ec      	bne.n	8002804 <_swilseek+0x36>
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	260c      	movs	r6, #12
 800282e:	466f      	mov	r7, sp
 8002830:	4630      	mov	r0, r6
 8002832:	4639      	mov	r1, r7
 8002834:	beab      	bkpt	0x00ab
 8002836:	4606      	mov	r6, r0
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff ff99 	bl	8002770 <checkerror>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	d0d0      	beq.n	80027e4 <_swilseek+0x16>
 8002842:	4404      	add	r4, r0
 8002844:	e7de      	b.n	8002804 <_swilseek+0x36>

08002846 <_lseek>:
 8002846:	f7ff bfc2 	b.w	80027ce <_swilseek>

0800284a <_swiwrite>:
 800284a:	b530      	push	{r4, r5, lr}
 800284c:	b085      	sub	sp, #20
 800284e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002852:	9203      	str	r2, [sp, #12]
 8002854:	2405      	movs	r4, #5
 8002856:	ad01      	add	r5, sp, #4
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	beab      	bkpt	0x00ab
 800285e:	4604      	mov	r4, r0
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff ff85 	bl	8002770 <checkerror>
 8002866:	b005      	add	sp, #20
 8002868:	bd30      	pop	{r4, r5, pc}

0800286a <_write>:
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	460e      	mov	r6, r1
 800286e:	4615      	mov	r5, r2
 8002870:	f7ff ff56 	bl	8002720 <findslot>
 8002874:	4604      	mov	r4, r0
 8002876:	b930      	cbnz	r0, 8002886 <_write+0x1c>
 8002878:	f000 fa0c 	bl	8002c94 <__errno>
 800287c:	2309      	movs	r3, #9
 800287e:	6003      	str	r3, [r0, #0]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	bd70      	pop	{r4, r5, r6, pc}
 8002886:	6800      	ldr	r0, [r0, #0]
 8002888:	462a      	mov	r2, r5
 800288a:	4631      	mov	r1, r6
 800288c:	f7ff ffdd 	bl	800284a <_swiwrite>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	dbf5      	blt.n	8002880 <_write+0x16>
 8002894:	6862      	ldr	r2, [r4, #4]
 8002896:	1ae8      	subs	r0, r5, r3
 8002898:	4402      	add	r2, r0
 800289a:	42ab      	cmp	r3, r5
 800289c:	6062      	str	r2, [r4, #4]
 800289e:	d1f1      	bne.n	8002884 <_write+0x1a>
 80028a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff bf55 	b.w	8002754 <error>

080028aa <_swiclose>:
 80028aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ac:	2402      	movs	r4, #2
 80028ae:	9001      	str	r0, [sp, #4]
 80028b0:	ad01      	add	r5, sp, #4
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	beab      	bkpt	0x00ab
 80028b8:	4604      	mov	r4, r0
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff ff58 	bl	8002770 <checkerror>
 80028c0:	b003      	add	sp, #12
 80028c2:	bd30      	pop	{r4, r5, pc}

080028c4 <_close>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4605      	mov	r5, r0
 80028c8:	f7ff ff2a 	bl	8002720 <findslot>
 80028cc:	4604      	mov	r4, r0
 80028ce:	b930      	cbnz	r0, 80028de <_close+0x1a>
 80028d0:	f000 f9e0 	bl	8002c94 <__errno>
 80028d4:	2309      	movs	r3, #9
 80028d6:	6003      	str	r3, [r0, #0]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	bd38      	pop	{r3, r4, r5, pc}
 80028de:	3d01      	subs	r5, #1
 80028e0:	2d01      	cmp	r5, #1
 80028e2:	d809      	bhi.n	80028f8 <_close+0x34>
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <_close+0x40>)
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d104      	bne.n	80028f8 <_close+0x34>
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	2000      	movs	r0, #0
 80028f6:	e7f1      	b.n	80028dc <_close+0x18>
 80028f8:	6820      	ldr	r0, [r4, #0]
 80028fa:	f7ff ffd6 	bl	80028aa <_swiclose>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0f5      	beq.n	80028ee <_close+0x2a>
 8002902:	e7eb      	b.n	80028dc <_close+0x18>
 8002904:	20000234 	.word	0x20000234

08002908 <_sbrk>:
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <_sbrk+0x38>)
 800290a:	6811      	ldr	r1, [r2, #0]
 800290c:	b510      	push	{r4, lr}
 800290e:	4603      	mov	r3, r0
 8002910:	b909      	cbnz	r1, 8002916 <_sbrk+0xe>
 8002912:	490c      	ldr	r1, [pc, #48]	@ (8002944 <_sbrk+0x3c>)
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	6810      	ldr	r0, [r2, #0]
 8002918:	4669      	mov	r1, sp
 800291a:	4403      	add	r3, r0
 800291c:	428b      	cmp	r3, r1
 800291e:	d806      	bhi.n	800292e <_sbrk+0x26>
 8002920:	4909      	ldr	r1, [pc, #36]	@ (8002948 <_sbrk+0x40>)
 8002922:	4c0a      	ldr	r4, [pc, #40]	@ (800294c <_sbrk+0x44>)
 8002924:	6809      	ldr	r1, [r1, #0]
 8002926:	42a1      	cmp	r1, r4
 8002928:	d008      	beq.n	800293c <_sbrk+0x34>
 800292a:	428b      	cmp	r3, r1
 800292c:	d906      	bls.n	800293c <_sbrk+0x34>
 800292e:	f000 f9b1 	bl	8002c94 <__errno>
 8002932:	230c      	movs	r3, #12
 8002934:	6003      	str	r3, [r0, #0]
 8002936:	f04f 30ff 	mov.w	r0, #4294967295
 800293a:	bd10      	pop	{r4, pc}
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e7fc      	b.n	800293a <_sbrk+0x32>
 8002940:	20000224 	.word	0x20000224
 8002944:	200002d8 	.word	0x200002d8
 8002948:	20000070 	.word	0x20000070
 800294c:	cafedead 	.word	0xcafedead

08002950 <_swistat>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	460c      	mov	r4, r1
 8002954:	f7ff fee4 	bl	8002720 <findslot>
 8002958:	4605      	mov	r5, r0
 800295a:	b930      	cbnz	r0, 800296a <_swistat+0x1a>
 800295c:	f000 f99a 	bl	8002c94 <__errno>
 8002960:	2309      	movs	r3, #9
 8002962:	6003      	str	r3, [r0, #0]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	6863      	ldr	r3, [r4, #4]
 800296c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002970:	6063      	str	r3, [r4, #4]
 8002972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002976:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002978:	260c      	movs	r6, #12
 800297a:	4630      	mov	r0, r6
 800297c:	4629      	mov	r1, r5
 800297e:	beab      	bkpt	0x00ab
 8002980:	4605      	mov	r5, r0
 8002982:	4628      	mov	r0, r5
 8002984:	f7ff fef4 	bl	8002770 <checkerror>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d0eb      	beq.n	8002964 <_swistat+0x14>
 800298c:	6120      	str	r0, [r4, #16]
 800298e:	2000      	movs	r0, #0
 8002990:	e7ea      	b.n	8002968 <_swistat+0x18>

08002992 <_fstat>:
 8002992:	460b      	mov	r3, r1
 8002994:	b510      	push	{r4, lr}
 8002996:	2100      	movs	r1, #0
 8002998:	4604      	mov	r4, r0
 800299a:	2258      	movs	r2, #88	@ 0x58
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f941 	bl	8001c24 <memset>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4620      	mov	r0, r4
 80029a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029aa:	f7ff bfd1 	b.w	8002950 <_swistat>

080029ae <_stat>:
 80029ae:	b538      	push	{r3, r4, r5, lr}
 80029b0:	460d      	mov	r5, r1
 80029b2:	4604      	mov	r4, r0
 80029b4:	2258      	movs	r2, #88	@ 0x58
 80029b6:	2100      	movs	r1, #0
 80029b8:	4628      	mov	r0, r5
 80029ba:	f7ff f933 	bl	8001c24 <memset>
 80029be:	4620      	mov	r0, r4
 80029c0:	2100      	movs	r1, #0
 80029c2:	f000 f811 	bl	80029e8 <_swiopen>
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	4604      	mov	r4, r0
 80029ca:	d00b      	beq.n	80029e4 <_stat+0x36>
 80029cc:	686b      	ldr	r3, [r5, #4]
 80029ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80029d2:	606b      	str	r3, [r5, #4]
 80029d4:	4629      	mov	r1, r5
 80029d6:	f7ff ffbb 	bl	8002950 <_swistat>
 80029da:	4605      	mov	r5, r0
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ff71 	bl	80028c4 <_close>
 80029e2:	462c      	mov	r4, r5
 80029e4:	4620      	mov	r0, r4
 80029e6:	bd38      	pop	{r3, r4, r5, pc}

080029e8 <_swiopen>:
 80029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	4f29      	ldr	r7, [pc, #164]	@ (8002a94 <_swiopen+0xac>)
 80029ee:	b096      	sub	sp, #88	@ 0x58
 80029f0:	4682      	mov	sl, r0
 80029f2:	460e      	mov	r6, r1
 80029f4:	2400      	movs	r4, #0
 80029f6:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80029fa:	3301      	adds	r3, #1
 80029fc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002a00:	d00c      	beq.n	8002a1c <_swiopen+0x34>
 8002a02:	3401      	adds	r4, #1
 8002a04:	2c14      	cmp	r4, #20
 8002a06:	d1f6      	bne.n	80029f6 <_swiopen+0xe>
 8002a08:	f000 f944 	bl	8002c94 <__errno>
 8002a0c:	2318      	movs	r3, #24
 8002a0e:	6003      	str	r3, [r0, #0]
 8002a10:	f04f 34ff 	mov.w	r4, #4294967295
 8002a14:	4620      	mov	r0, r4
 8002a16:	b016      	add	sp, #88	@ 0x58
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002a20:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002a24:	46e9      	mov	r9, sp
 8002a26:	d109      	bne.n	8002a3c <_swiopen+0x54>
 8002a28:	4649      	mov	r1, r9
 8002a2a:	4650      	mov	r0, sl
 8002a2c:	f7ff ffbf 	bl	80029ae <_stat>
 8002a30:	3001      	adds	r0, #1
 8002a32:	d003      	beq.n	8002a3c <_swiopen+0x54>
 8002a34:	f000 f92e 	bl	8002c94 <__errno>
 8002a38:	2311      	movs	r3, #17
 8002a3a:	e7e8      	b.n	8002a0e <_swiopen+0x26>
 8002a3c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002a40:	f240 6301 	movw	r3, #1537	@ 0x601
 8002a44:	07b2      	lsls	r2, r6, #30
 8002a46:	bf48      	it	mi
 8002a48:	f045 0502 	orrmi.w	r5, r5, #2
 8002a4c:	421e      	tst	r6, r3
 8002a4e:	bf18      	it	ne
 8002a50:	f045 0504 	orrne.w	r5, r5, #4
 8002a54:	0733      	lsls	r3, r6, #28
 8002a56:	bf48      	it	mi
 8002a58:	f025 0504 	bicmi.w	r5, r5, #4
 8002a5c:	4650      	mov	r0, sl
 8002a5e:	bf48      	it	mi
 8002a60:	f045 0508 	orrmi.w	r5, r5, #8
 8002a64:	f8cd a000 	str.w	sl, [sp]
 8002a68:	f7fd fc02 	bl	8000270 <strlen>
 8002a6c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002a70:	2501      	movs	r5, #1
 8002a72:	4628      	mov	r0, r5
 8002a74:	4649      	mov	r1, r9
 8002a76:	beab      	bkpt	0x00ab
 8002a78:	4605      	mov	r5, r0
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	db05      	blt.n	8002a8a <_swiopen+0xa2>
 8002a7e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002a82:	4447      	add	r7, r8
 8002a84:	2300      	movs	r3, #0
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	e7c4      	b.n	8002a14 <_swiopen+0x2c>
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f7ff fe62 	bl	8002754 <error>
 8002a90:	4604      	mov	r4, r0
 8002a92:	e7bf      	b.n	8002a14 <_swiopen+0x2c>
 8002a94:	20000234 	.word	0x20000234

08002a98 <_get_semihosting_exts>:
 8002a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460f      	mov	r7, r1
 8002aa0:	4829      	ldr	r0, [pc, #164]	@ (8002b48 <_get_semihosting_exts+0xb0>)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4615      	mov	r5, r2
 8002aa6:	f7ff ff9f 	bl	80029e8 <_swiopen>
 8002aaa:	462a      	mov	r2, r5
 8002aac:	4604      	mov	r4, r0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff f8b7 	bl	8001c24 <memset>
 8002ab6:	1c63      	adds	r3, r4, #1
 8002ab8:	d014      	beq.n	8002ae4 <_get_semihosting_exts+0x4c>
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff fe30 	bl	8002720 <findslot>
 8002ac0:	f04f 080c 	mov.w	r8, #12
 8002ac4:	4681      	mov	r9, r0
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	4649      	mov	r1, r9
 8002aca:	beab      	bkpt	0x00ab
 8002acc:	4680      	mov	r8, r0
 8002ace:	4640      	mov	r0, r8
 8002ad0:	f7ff fe4e 	bl	8002770 <checkerror>
 8002ad4:	2803      	cmp	r0, #3
 8002ad6:	dd02      	ble.n	8002ade <_get_semihosting_exts+0x46>
 8002ad8:	1ec3      	subs	r3, r0, #3
 8002ada:	42ab      	cmp	r3, r5
 8002adc:	dc07      	bgt.n	8002aee <_get_semihosting_exts+0x56>
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fef0 	bl	80028c4 <_close>
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	b003      	add	sp, #12
 8002aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002aee:	2204      	movs	r2, #4
 8002af0:	eb0d 0102 	add.w	r1, sp, r2
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff fe50 	bl	800279a <_read>
 8002afa:	2803      	cmp	r0, #3
 8002afc:	ddef      	ble.n	8002ade <_get_semihosting_exts+0x46>
 8002afe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b02:	2b53      	cmp	r3, #83	@ 0x53
 8002b04:	d1eb      	bne.n	8002ade <_get_semihosting_exts+0x46>
 8002b06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b0a:	2b48      	cmp	r3, #72	@ 0x48
 8002b0c:	d1e7      	bne.n	8002ade <_get_semihosting_exts+0x46>
 8002b0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b12:	2b46      	cmp	r3, #70	@ 0x46
 8002b14:	d1e3      	bne.n	8002ade <_get_semihosting_exts+0x46>
 8002b16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b1a:	2b42      	cmp	r3, #66	@ 0x42
 8002b1c:	d1df      	bne.n	8002ade <_get_semihosting_exts+0x46>
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4639      	mov	r1, r7
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7ff fe53 	bl	80027ce <_swilseek>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	dbd8      	blt.n	8002ade <_get_semihosting_exts+0x46>
 8002b2c:	462a      	mov	r2, r5
 8002b2e:	4631      	mov	r1, r6
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7ff fe32 	bl	800279a <_read>
 8002b36:	4605      	mov	r5, r0
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff fec3 	bl	80028c4 <_close>
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f7ff fe16 	bl	8002770 <checkerror>
 8002b44:	e7d0      	b.n	8002ae8 <_get_semihosting_exts+0x50>
 8002b46:	bf00      	nop
 8002b48:	08002d95 	.word	0x08002d95

08002b4c <initialise_semihosting_exts>:
 8002b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b78 <initialise_semihosting_exts+0x2c>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <initialise_semihosting_exts+0x30>)
 8002b52:	2100      	movs	r1, #0
 8002b54:	2201      	movs	r2, #1
 8002b56:	a801      	add	r0, sp, #4
 8002b58:	6029      	str	r1, [r5, #0]
 8002b5a:	6022      	str	r2, [r4, #0]
 8002b5c:	f7ff ff9c 	bl	8002a98 <_get_semihosting_exts>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	dd07      	ble.n	8002b74 <initialise_semihosting_exts+0x28>
 8002b64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	602a      	str	r2, [r5, #0]
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	b003      	add	sp, #12
 8002b76:	bd30      	pop	{r4, r5, pc}
 8002b78:	20000078 	.word	0x20000078
 8002b7c:	20000074 	.word	0x20000074

08002b80 <_has_ext_stdout_stderr>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4c04      	ldr	r4, [pc, #16]	@ (8002b94 <_has_ext_stdout_stderr+0x14>)
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da01      	bge.n	8002b8e <_has_ext_stdout_stderr+0xe>
 8002b8a:	f7ff ffdf 	bl	8002b4c <initialise_semihosting_exts>
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	bf00      	nop
 8002b94:	20000074 	.word	0x20000074

08002b98 <initialise_monitor_handles>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002c50 <initialise_monitor_handles+0xb8>
 8002ba2:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	2400      	movs	r4, #0
 8002baa:	9303      	str	r3, [sp, #12]
 8002bac:	af01      	add	r7, sp, #4
 8002bae:	9402      	str	r4, [sp, #8]
 8002bb0:	2501      	movs	r5, #1
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	beab      	bkpt	0x00ab
 8002bb8:	4605      	mov	r5, r0
 8002bba:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002c54 <initialise_monitor_handles+0xbc>
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	4c20      	ldr	r4, [pc, #128]	@ (8002c44 <initialise_monitor_handles+0xac>)
 8002bc2:	f8c8 5000 	str.w	r5, [r8]
 8002bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	2b14      	cmp	r3, #20
 8002bd2:	d1fa      	bne.n	8002bca <initialise_monitor_handles+0x32>
 8002bd4:	f7ff ffd4 	bl	8002b80 <_has_ext_stdout_stderr>
 8002bd8:	4d1b      	ldr	r5, [pc, #108]	@ (8002c48 <initialise_monitor_handles+0xb0>)
 8002bda:	b1d0      	cbz	r0, 8002c12 <initialise_monitor_handles+0x7a>
 8002bdc:	f04f 0a03 	mov.w	sl, #3
 8002be0:	2304      	movs	r3, #4
 8002be2:	f8cd 9004 	str.w	r9, [sp, #4]
 8002be6:	2601      	movs	r6, #1
 8002be8:	f8cd a00c 	str.w	sl, [sp, #12]
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	4630      	mov	r0, r6
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	beab      	bkpt	0x00ab
 8002bf4:	4683      	mov	fp, r0
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <initialise_monitor_handles+0xb4>)
 8002bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8002bfc:	f8c3 b000 	str.w	fp, [r3]
 8002c00:	2308      	movs	r3, #8
 8002c02:	f8cd a00c 	str.w	sl, [sp, #12]
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	4630      	mov	r0, r6
 8002c0a:	4639      	mov	r1, r7
 8002c0c:	beab      	bkpt	0x00ab
 8002c0e:	4606      	mov	r6, r0
 8002c10:	602e      	str	r6, [r5, #0]
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	bf02      	ittt	eq
 8002c18:	4b0c      	ldreq	r3, [pc, #48]	@ (8002c4c <initialise_monitor_handles+0xb4>)
 8002c1a:	681b      	ldreq	r3, [r3, #0]
 8002c1c:	602b      	streq	r3, [r5, #0]
 8002c1e:	2600      	movs	r6, #0
 8002c20:	f8d8 3000 	ldr.w	r3, [r8]
 8002c24:	6023      	str	r3, [r4, #0]
 8002c26:	6066      	str	r6, [r4, #4]
 8002c28:	f7ff ffaa 	bl	8002b80 <_has_ext_stdout_stderr>
 8002c2c:	b130      	cbz	r0, 8002c3c <initialise_monitor_handles+0xa4>
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <initialise_monitor_handles+0xb4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002c3c:	b005      	add	sp, #20
 8002c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c42:	bf00      	nop
 8002c44:	20000234 	.word	0x20000234
 8002c48:	20000228 	.word	0x20000228
 8002c4c:	2000022c 	.word	0x2000022c
 8002c50:	08002dab 	.word	0x08002dab
 8002c54:	20000230 	.word	0x20000230

08002c58 <_isatty>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	f7ff fd61 	bl	8002720 <findslot>
 8002c5e:	2409      	movs	r4, #9
 8002c60:	4605      	mov	r5, r0
 8002c62:	b920      	cbnz	r0, 8002c6e <_isatty+0x16>
 8002c64:	f000 f816 	bl	8002c94 <__errno>
 8002c68:	6004      	str	r4, [r0, #0]
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	beab      	bkpt	0x00ab
 8002c74:	4604      	mov	r4, r0
 8002c76:	2c01      	cmp	r4, #1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	d0f7      	beq.n	8002c6c <_isatty+0x14>
 8002c7c:	f000 f80a 	bl	8002c94 <__errno>
 8002c80:	2513      	movs	r5, #19
 8002c82:	4604      	mov	r4, r0
 8002c84:	2600      	movs	r6, #0
 8002c86:	4628      	mov	r0, r5
 8002c88:	4631      	mov	r1, r6
 8002c8a:	beab      	bkpt	0x00ab
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	6025      	str	r5, [r4, #0]
 8002c90:	e7eb      	b.n	8002c6a <_isatty+0x12>
	...

08002c94 <__errno>:
 8002c94:	4b01      	ldr	r3, [pc, #4]	@ (8002c9c <__errno+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000020 	.word	0x20000020

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
